
Basic Timer - Periodic Signal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e40  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001f00  08001f00  00011f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f38  08001f38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f38  08001f38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f38  08001f38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f38  08001f38  00011f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f3c  08001f3c  00011f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000938  2000000c  08001f4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  08001f4c  00020944  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000619e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015a5  00000000  00000000  000261d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000668  00000000  00000000  00027778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d0  00000000  00000000  00027de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f64d  00000000  00000000  000283b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000067c0  00000000  00000000  000379fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005c53b  00000000  00000000  0003e1bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009a6f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001500  00000000  00000000  0009a774  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001ee8 	.word	0x08001ee8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001ee8 	.word	0x08001ee8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f9dc 	bl	80005e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f807 	bl	800023a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f898 	bl	8000360 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000230:	f000 f866 	bl	8000300 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  timer6_init();
 8000234:	f001 fd78 	bl	8001d28 <timer6_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x18>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b590      	push	{r4, r7, lr}
 800023c:	b097      	sub	sp, #92	; 0x5c
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	2428      	movs	r4, #40	; 0x28
 8000242:	193b      	adds	r3, r7, r4
 8000244:	0018      	movs	r0, r3
 8000246:	2330      	movs	r3, #48	; 0x30
 8000248:	001a      	movs	r2, r3
 800024a:	2100      	movs	r1, #0
 800024c:	f001 fe44 	bl	8001ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	2318      	movs	r3, #24
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	0018      	movs	r0, r3
 8000256:	2310      	movs	r3, #16
 8000258:	001a      	movs	r2, r3
 800025a:	2100      	movs	r1, #0
 800025c:	f001 fe3c 	bl	8001ed8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	0018      	movs	r0, r3
 8000264:	2314      	movs	r3, #20
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f001 fe35 	bl	8001ed8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026e:	0021      	movs	r1, r4
 8000270:	187b      	adds	r3, r7, r1
 8000272:	2202      	movs	r2, #2
 8000274:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	187b      	adds	r3, r7, r1
 8000278:	2201      	movs	r2, #1
 800027a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	187b      	adds	r3, r7, r1
 800027e:	2210      	movs	r2, #16
 8000280:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2202      	movs	r2, #2
 8000286:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	0212      	lsls	r2, r2, #8
 800028e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2280      	movs	r2, #128	; 0x80
 8000294:	0352      	lsls	r2, r2, #13
 8000296:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2200      	movs	r2, #0
 800029c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 fc43 	bl	8000b2c <HAL_RCC_OscConfig>
 80002a6:	1e03      	subs	r3, r0, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002aa:	f000 f8d9 	bl	8000460 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	2118      	movs	r1, #24
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2207      	movs	r2, #7
 80002b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2202      	movs	r2, #2
 80002ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2200      	movs	r2, #0
 80002c6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2101      	movs	r1, #1
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 ff4b 	bl	8001168 <HAL_RCC_ClockConfig>
 80002d2:	1e03      	subs	r3, r0, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002d6:	f000 f8c3 	bl	8000460 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2201      	movs	r2, #1
 80002de:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 f891 	bl	8001410 <HAL_RCCEx_PeriphCLKConfig>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80002f2:	f000 f8b5 	bl	8000460 <Error_Handler>
  }
}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	46bd      	mov	sp, r7
 80002fa:	b017      	add	sp, #92	; 0x5c
 80002fc:	bd90      	pop	{r4, r7, pc}
	...

08000300 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000304:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_USART1_UART_Init+0x58>)
 8000306:	4a15      	ldr	r2, [pc, #84]	; (800035c <MX_USART1_UART_Init+0x5c>)
 8000308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800030a:	4b13      	ldr	r3, [pc, #76]	; (8000358 <MX_USART1_UART_Init+0x58>)
 800030c:	2296      	movs	r2, #150	; 0x96
 800030e:	0212      	lsls	r2, r2, #8
 8000310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_USART1_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_USART1_UART_Init+0x58>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_USART1_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_USART1_UART_Init+0x58>)
 8000326:	220c      	movs	r2, #12
 8000328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <MX_USART1_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_USART1_UART_Init+0x58>)
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <MX_USART1_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_USART1_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000342:	4b05      	ldr	r3, [pc, #20]	; (8000358 <MX_USART1_UART_Init+0x58>)
 8000344:	0018      	movs	r0, r3
 8000346:	f001 f941 	bl	80015cc <HAL_UART_Init>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800034e:	f000 f887 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000028 	.word	0x20000028
 800035c:	40013800 	.word	0x40013800

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b590      	push	{r4, r7, lr}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	240c      	movs	r4, #12
 8000368:	193b      	adds	r3, r7, r4
 800036a:	0018      	movs	r0, r3
 800036c:	2314      	movs	r3, #20
 800036e:	001a      	movs	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f001 fdb1 	bl	8001ed8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000376:	4b37      	ldr	r3, [pc, #220]	; (8000454 <MX_GPIO_Init+0xf4>)
 8000378:	695a      	ldr	r2, [r3, #20]
 800037a:	4b36      	ldr	r3, [pc, #216]	; (8000454 <MX_GPIO_Init+0xf4>)
 800037c:	2180      	movs	r1, #128	; 0x80
 800037e:	0309      	lsls	r1, r1, #12
 8000380:	430a      	orrs	r2, r1
 8000382:	615a      	str	r2, [r3, #20]
 8000384:	4b33      	ldr	r3, [pc, #204]	; (8000454 <MX_GPIO_Init+0xf4>)
 8000386:	695a      	ldr	r2, [r3, #20]
 8000388:	2380      	movs	r3, #128	; 0x80
 800038a:	031b      	lsls	r3, r3, #12
 800038c:	4013      	ands	r3, r2
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000392:	4b30      	ldr	r3, [pc, #192]	; (8000454 <MX_GPIO_Init+0xf4>)
 8000394:	695a      	ldr	r2, [r3, #20]
 8000396:	4b2f      	ldr	r3, [pc, #188]	; (8000454 <MX_GPIO_Init+0xf4>)
 8000398:	2180      	movs	r1, #128	; 0x80
 800039a:	03c9      	lsls	r1, r1, #15
 800039c:	430a      	orrs	r2, r1
 800039e:	615a      	str	r2, [r3, #20]
 80003a0:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <MX_GPIO_Init+0xf4>)
 80003a2:	695a      	ldr	r2, [r3, #20]
 80003a4:	2380      	movs	r3, #128	; 0x80
 80003a6:	03db      	lsls	r3, r3, #15
 80003a8:	4013      	ands	r3, r2
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b29      	ldr	r3, [pc, #164]	; (8000454 <MX_GPIO_Init+0xf4>)
 80003b0:	695a      	ldr	r2, [r3, #20]
 80003b2:	4b28      	ldr	r3, [pc, #160]	; (8000454 <MX_GPIO_Init+0xf4>)
 80003b4:	2180      	movs	r1, #128	; 0x80
 80003b6:	0289      	lsls	r1, r1, #10
 80003b8:	430a      	orrs	r2, r1
 80003ba:	615a      	str	r2, [r3, #20]
 80003bc:	4b25      	ldr	r3, [pc, #148]	; (8000454 <MX_GPIO_Init+0xf4>)
 80003be:	695a      	ldr	r2, [r3, #20]
 80003c0:	2380      	movs	r3, #128	; 0x80
 80003c2:	029b      	lsls	r3, r3, #10
 80003c4:	4013      	ands	r3, r2
 80003c6:	603b      	str	r3, [r7, #0]
 80003c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003ca:	2390      	movs	r3, #144	; 0x90
 80003cc:	05db      	lsls	r3, r3, #23
 80003ce:	2200      	movs	r2, #0
 80003d0:	2120      	movs	r1, #32
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 fb8c 	bl	8000af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	0192      	lsls	r2, r2, #6
 80003de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <MX_GPIO_Init+0xf8>)
 80003e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	193b      	adds	r3, r7, r4
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	4a1b      	ldr	r2, [pc, #108]	; (800045c <MX_GPIO_Init+0xfc>)
 80003f0:	0019      	movs	r1, r3
 80003f2:	0010      	movs	r0, r2
 80003f4:	f000 fa0c 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	220c      	movs	r2, #12
 80003fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003fe:	193b      	adds	r3, r7, r4
 8000400:	2202      	movs	r2, #2
 8000402:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	193b      	adds	r3, r7, r4
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800040a:	193b      	adds	r3, r7, r4
 800040c:	2203      	movs	r2, #3
 800040e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000410:	193b      	adds	r3, r7, r4
 8000412:	2201      	movs	r2, #1
 8000414:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000416:	193a      	adds	r2, r7, r4
 8000418:	2390      	movs	r3, #144	; 0x90
 800041a:	05db      	lsls	r3, r3, #23
 800041c:	0011      	movs	r1, r2
 800041e:	0018      	movs	r0, r3
 8000420:	f000 f9f6 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000424:	0021      	movs	r1, r4
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2220      	movs	r2, #32
 800042a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2201      	movs	r2, #1
 8000430:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800043e:	187a      	adds	r2, r7, r1
 8000440:	2390      	movs	r3, #144	; 0x90
 8000442:	05db      	lsls	r3, r3, #23
 8000444:	0011      	movs	r1, r2
 8000446:	0018      	movs	r0, r3
 8000448:	f000 f9e2 	bl	8000810 <HAL_GPIO_Init>

}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b009      	add	sp, #36	; 0x24
 8000452:	bd90      	pop	{r4, r7, pc}
 8000454:	40021000 	.word	0x40021000
 8000458:	10210000 	.word	0x10210000
 800045c:	48000800 	.word	0x48000800

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <HAL_MspInit+0x44>)
 8000474:	699a      	ldr	r2, [r3, #24]
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <HAL_MspInit+0x44>)
 8000478:	2101      	movs	r1, #1
 800047a:	430a      	orrs	r2, r1
 800047c:	619a      	str	r2, [r3, #24]
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <HAL_MspInit+0x44>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	2201      	movs	r2, #1
 8000484:	4013      	ands	r3, r2
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <HAL_MspInit+0x44>)
 800048c:	69da      	ldr	r2, [r3, #28]
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <HAL_MspInit+0x44>)
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	0549      	lsls	r1, r1, #21
 8000494:	430a      	orrs	r2, r1
 8000496:	61da      	str	r2, [r3, #28]
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <HAL_MspInit+0x44>)
 800049a:	69da      	ldr	r2, [r3, #28]
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	055b      	lsls	r3, r3, #21
 80004a0:	4013      	ands	r3, r2
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b002      	add	sp, #8
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	40021000 	.word	0x40021000

080004b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	2314      	movs	r3, #20
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	0018      	movs	r0, r3
 80004c2:	2314      	movs	r3, #20
 80004c4:	001a      	movs	r2, r3
 80004c6:	2100      	movs	r1, #0
 80004c8:	f001 fd06 	bl	8001ed8 <memset>
  if(huart->Instance==USART1)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a1d      	ldr	r2, [pc, #116]	; (8000548 <HAL_UART_MspInit+0x94>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d133      	bne.n	800053e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004d6:	4b1d      	ldr	r3, [pc, #116]	; (800054c <HAL_UART_MspInit+0x98>)
 80004d8:	699a      	ldr	r2, [r3, #24]
 80004da:	4b1c      	ldr	r3, [pc, #112]	; (800054c <HAL_UART_MspInit+0x98>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	01c9      	lsls	r1, r1, #7
 80004e0:	430a      	orrs	r2, r1
 80004e2:	619a      	str	r2, [r3, #24]
 80004e4:	4b19      	ldr	r3, [pc, #100]	; (800054c <HAL_UART_MspInit+0x98>)
 80004e6:	699a      	ldr	r2, [r3, #24]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	01db      	lsls	r3, r3, #7
 80004ec:	4013      	ands	r3, r2
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b16      	ldr	r3, [pc, #88]	; (800054c <HAL_UART_MspInit+0x98>)
 80004f4:	695a      	ldr	r2, [r3, #20]
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <HAL_UART_MspInit+0x98>)
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	0289      	lsls	r1, r1, #10
 80004fc:	430a      	orrs	r2, r1
 80004fe:	615a      	str	r2, [r3, #20]
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_UART_MspInit+0x98>)
 8000502:	695a      	ldr	r2, [r3, #20]
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	029b      	lsls	r3, r3, #10
 8000508:	4013      	ands	r3, r2
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800050e:	2114      	movs	r1, #20
 8000510:	187b      	adds	r3, r7, r1
 8000512:	22c0      	movs	r2, #192	; 0xc0
 8000514:	00d2      	lsls	r2, r2, #3
 8000516:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2202      	movs	r2, #2
 800051c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2203      	movs	r2, #3
 8000528:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2201      	movs	r2, #1
 800052e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	187a      	adds	r2, r7, r1
 8000532:	2390      	movs	r3, #144	; 0x90
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f000 f969 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b00a      	add	sp, #40	; 0x28
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	40013800 	.word	0x40013800
 800054c:	40021000 	.word	0x40021000

08000550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000578:	f000 f87a 	bl	8000670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000592:	490e      	ldr	r1, [pc, #56]	; (80005cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <LoopForever+0xe>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a0b      	ldr	r2, [pc, #44]	; (80005d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a8:	4c0b      	ldr	r4, [pc, #44]	; (80005d8 <LoopForever+0x16>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005b6:	f7ff ffe4 	bl	8000582 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005ba:	f001 fc69 	bl	8001e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005be:	f7ff fe2f 	bl	8000220 <main>

080005c2 <LoopForever>:

LoopForever:
    b LoopForever
 80005c2:	e7fe      	b.n	80005c2 <LoopForever>
  ldr   r0, =_estack
 80005c4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005d0:	08001f40 	.word	0x08001f40
  ldr r2, =_sbss
 80005d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005d8:	20000944 	.word	0x20000944

080005dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005dc:	e7fe      	b.n	80005dc <ADC1_IRQHandler>
	...

080005e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <HAL_Init+0x24>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_Init+0x24>)
 80005ea:	2110      	movs	r1, #16
 80005ec:	430a      	orrs	r2, r1
 80005ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 f809 	bl	8000608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f6:	f7ff ff39 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	0018      	movs	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	40022000 	.word	0x40022000

08000608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <HAL_InitTick+0x5c>)
 8000612:	681c      	ldr	r4, [r3, #0]
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <HAL_InitTick+0x60>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	0019      	movs	r1, r3
 800061a:	23fa      	movs	r3, #250	; 0xfa
 800061c:	0098      	lsls	r0, r3, #2
 800061e:	f7ff fd73 	bl	8000108 <__udivsi3>
 8000622:	0003      	movs	r3, r0
 8000624:	0019      	movs	r1, r3
 8000626:	0020      	movs	r0, r4
 8000628:	f7ff fd6e 	bl	8000108 <__udivsi3>
 800062c:	0003      	movs	r3, r0
 800062e:	0018      	movs	r0, r3
 8000630:	f000 f8e1 	bl	80007f6 <HAL_SYSTICK_Config>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000638:	2301      	movs	r3, #1
 800063a:	e00f      	b.n	800065c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b03      	cmp	r3, #3
 8000640:	d80b      	bhi.n	800065a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	2301      	movs	r3, #1
 8000646:	425b      	negs	r3, r3
 8000648:	2200      	movs	r2, #0
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f8be 	bl	80007cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_InitTick+0x64>)
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000656:	2300      	movs	r3, #0
 8000658:	e000      	b.n	800065c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
}
 800065c:	0018      	movs	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	b003      	add	sp, #12
 8000662:	bd90      	pop	{r4, r7, pc}
 8000664:	20000000 	.word	0x20000000
 8000668:	20000008 	.word	0x20000008
 800066c:	20000004 	.word	0x20000004

08000670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <HAL_IncTick+0x1c>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	001a      	movs	r2, r3
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_IncTick+0x20>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	18d2      	adds	r2, r2, r3
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <HAL_IncTick+0x20>)
 8000682:	601a      	str	r2, [r3, #0]
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	20000008 	.word	0x20000008
 8000690:	200000ac 	.word	0x200000ac

08000694 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  return uwTick;
 8000698:	4b02      	ldr	r3, [pc, #8]	; (80006a4 <HAL_GetTick+0x10>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	0018      	movs	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	200000ac 	.word	0x200000ac

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	0002      	movs	r2, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b7f      	cmp	r3, #127	; 0x7f
 80006bc:	d828      	bhi.n	8000710 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006be:	4a2f      	ldr	r2, [pc, #188]	; (800077c <__NVIC_SetPriority+0xd4>)
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	089b      	lsrs	r3, r3, #2
 80006c8:	33c0      	adds	r3, #192	; 0xc0
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	589b      	ldr	r3, [r3, r2]
 80006ce:	1dfa      	adds	r2, r7, #7
 80006d0:	7812      	ldrb	r2, [r2, #0]
 80006d2:	0011      	movs	r1, r2
 80006d4:	2203      	movs	r2, #3
 80006d6:	400a      	ands	r2, r1
 80006d8:	00d2      	lsls	r2, r2, #3
 80006da:	21ff      	movs	r1, #255	; 0xff
 80006dc:	4091      	lsls	r1, r2
 80006de:	000a      	movs	r2, r1
 80006e0:	43d2      	mvns	r2, r2
 80006e2:	401a      	ands	r2, r3
 80006e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	019b      	lsls	r3, r3, #6
 80006ea:	22ff      	movs	r2, #255	; 0xff
 80006ec:	401a      	ands	r2, r3
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	0018      	movs	r0, r3
 80006f4:	2303      	movs	r3, #3
 80006f6:	4003      	ands	r3, r0
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006fc:	481f      	ldr	r0, [pc, #124]	; (800077c <__NVIC_SetPriority+0xd4>)
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b25b      	sxtb	r3, r3
 8000704:	089b      	lsrs	r3, r3, #2
 8000706:	430a      	orrs	r2, r1
 8000708:	33c0      	adds	r3, #192	; 0xc0
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800070e:	e031      	b.n	8000774 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000710:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <__NVIC_SetPriority+0xd8>)
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	0019      	movs	r1, r3
 8000718:	230f      	movs	r3, #15
 800071a:	400b      	ands	r3, r1
 800071c:	3b08      	subs	r3, #8
 800071e:	089b      	lsrs	r3, r3, #2
 8000720:	3306      	adds	r3, #6
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	18d3      	adds	r3, r2, r3
 8000726:	3304      	adds	r3, #4
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1dfa      	adds	r2, r7, #7
 800072c:	7812      	ldrb	r2, [r2, #0]
 800072e:	0011      	movs	r1, r2
 8000730:	2203      	movs	r2, #3
 8000732:	400a      	ands	r2, r1
 8000734:	00d2      	lsls	r2, r2, #3
 8000736:	21ff      	movs	r1, #255	; 0xff
 8000738:	4091      	lsls	r1, r2
 800073a:	000a      	movs	r2, r1
 800073c:	43d2      	mvns	r2, r2
 800073e:	401a      	ands	r2, r3
 8000740:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	019b      	lsls	r3, r3, #6
 8000746:	22ff      	movs	r2, #255	; 0xff
 8000748:	401a      	ands	r2, r3
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	0018      	movs	r0, r3
 8000750:	2303      	movs	r3, #3
 8000752:	4003      	ands	r3, r0
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <__NVIC_SetPriority+0xd8>)
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	001c      	movs	r4, r3
 8000760:	230f      	movs	r3, #15
 8000762:	4023      	ands	r3, r4
 8000764:	3b08      	subs	r3, #8
 8000766:	089b      	lsrs	r3, r3, #2
 8000768:	430a      	orrs	r2, r1
 800076a:	3306      	adds	r3, #6
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	18c3      	adds	r3, r0, r3
 8000770:	3304      	adds	r3, #4
 8000772:	601a      	str	r2, [r3, #0]
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b003      	add	sp, #12
 800077a:	bd90      	pop	{r4, r7, pc}
 800077c:	e000e100 	.word	0xe000e100
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <SysTick_Config+0x40>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d901      	bls.n	800079a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000796:	2301      	movs	r3, #1
 8000798:	e010      	b.n	80007bc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <SysTick_Config+0x44>)
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	3a01      	subs	r2, #1
 80007a0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a2:	2301      	movs	r3, #1
 80007a4:	425b      	negs	r3, r3
 80007a6:	2103      	movs	r1, #3
 80007a8:	0018      	movs	r0, r3
 80007aa:	f7ff ff7d 	bl	80006a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <SysTick_Config+0x44>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <SysTick_Config+0x44>)
 80007b6:	2207      	movs	r2, #7
 80007b8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	0018      	movs	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	b002      	add	sp, #8
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	00ffffff 	.word	0x00ffffff
 80007c8:	e000e010 	.word	0xe000e010

080007cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	210f      	movs	r1, #15
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	1c02      	adds	r2, r0, #0
 80007dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	0011      	movs	r1, r2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff ff5d 	bl	80006a8 <__NVIC_SetPriority>
}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b004      	add	sp, #16
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff ffbf 	bl	8000784 <SysTick_Config>
 8000806:	0003      	movs	r3, r0
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800081e:	e14f      	b.n	8000ac0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2101      	movs	r1, #1
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	4091      	lsls	r1, r2
 800082a:	000a      	movs	r2, r1
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d100      	bne.n	8000838 <HAL_GPIO_Init+0x28>
 8000836:	e140      	b.n	8000aba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d00b      	beq.n	8000858 <HAL_GPIO_Init+0x48>
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d007      	beq.n	8000858 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084c:	2b11      	cmp	r3, #17
 800084e:	d003      	beq.n	8000858 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b12      	cmp	r3, #18
 8000856:	d130      	bne.n	80008ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	2203      	movs	r2, #3
 8000864:	409a      	lsls	r2, r3
 8000866:	0013      	movs	r3, r2
 8000868:	43da      	mvns	r2, r3
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	409a      	lsls	r2, r3
 800087a:	0013      	movs	r3, r2
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4313      	orrs	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800088e:	2201      	movs	r2, #1
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	409a      	lsls	r2, r3
 8000894:	0013      	movs	r3, r2
 8000896:	43da      	mvns	r2, r3
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	4013      	ands	r3, r2
 800089c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	091b      	lsrs	r3, r3, #4
 80008a4:	2201      	movs	r2, #1
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
 80008ac:	0013      	movs	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	2203      	movs	r2, #3
 80008c6:	409a      	lsls	r2, r3
 80008c8:	0013      	movs	r3, r2
 80008ca:	43da      	mvns	r2, r3
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	4013      	ands	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	689a      	ldr	r2, [r3, #8]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	409a      	lsls	r2, r3
 80008dc:	0013      	movs	r3, r2
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d003      	beq.n	80008fa <HAL_GPIO_Init+0xea>
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d123      	bne.n	8000942 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	08da      	lsrs	r2, r3, #3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3208      	adds	r2, #8
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	58d3      	ldr	r3, [r2, r3]
 8000906:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2207      	movs	r2, #7
 800090c:	4013      	ands	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	220f      	movs	r2, #15
 8000912:	409a      	lsls	r2, r3
 8000914:	0013      	movs	r3, r2
 8000916:	43da      	mvns	r2, r3
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	691a      	ldr	r2, [r3, #16]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	2107      	movs	r1, #7
 8000926:	400b      	ands	r3, r1
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	409a      	lsls	r2, r3
 800092c:	0013      	movs	r3, r2
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	08da      	lsrs	r2, r3, #3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3208      	adds	r2, #8
 800093c:	0092      	lsls	r2, r2, #2
 800093e:	6939      	ldr	r1, [r7, #16]
 8000940:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	2203      	movs	r2, #3
 800094e:	409a      	lsls	r2, r3
 8000950:	0013      	movs	r3, r2
 8000952:	43da      	mvns	r2, r3
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	4013      	ands	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2203      	movs	r2, #3
 8000960:	401a      	ands	r2, r3
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	409a      	lsls	r2, r3
 8000968:	0013      	movs	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	055b      	lsls	r3, r3, #21
 800097e:	4013      	ands	r3, r2
 8000980:	d100      	bne.n	8000984 <HAL_GPIO_Init+0x174>
 8000982:	e09a      	b.n	8000aba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000984:	4b54      	ldr	r3, [pc, #336]	; (8000ad8 <HAL_GPIO_Init+0x2c8>)
 8000986:	699a      	ldr	r2, [r3, #24]
 8000988:	4b53      	ldr	r3, [pc, #332]	; (8000ad8 <HAL_GPIO_Init+0x2c8>)
 800098a:	2101      	movs	r1, #1
 800098c:	430a      	orrs	r2, r1
 800098e:	619a      	str	r2, [r3, #24]
 8000990:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <HAL_GPIO_Init+0x2c8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	2201      	movs	r2, #1
 8000996:	4013      	ands	r3, r2
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800099c:	4a4f      	ldr	r2, [pc, #316]	; (8000adc <HAL_GPIO_Init+0x2cc>)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	3302      	adds	r3, #2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	589b      	ldr	r3, [r3, r2]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	2203      	movs	r2, #3
 80009ae:	4013      	ands	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	220f      	movs	r2, #15
 80009b4:	409a      	lsls	r2, r3
 80009b6:	0013      	movs	r3, r2
 80009b8:	43da      	mvns	r2, r3
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	2390      	movs	r3, #144	; 0x90
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d013      	beq.n	80009f2 <HAL_GPIO_Init+0x1e2>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a44      	ldr	r2, [pc, #272]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d00d      	beq.n	80009ee <HAL_GPIO_Init+0x1de>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a43      	ldr	r2, [pc, #268]	; (8000ae4 <HAL_GPIO_Init+0x2d4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d007      	beq.n	80009ea <HAL_GPIO_Init+0x1da>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a42      	ldr	r2, [pc, #264]	; (8000ae8 <HAL_GPIO_Init+0x2d8>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_GPIO_Init+0x1d6>
 80009e2:	2303      	movs	r3, #3
 80009e4:	e006      	b.n	80009f4 <HAL_GPIO_Init+0x1e4>
 80009e6:	2305      	movs	r3, #5
 80009e8:	e004      	b.n	80009f4 <HAL_GPIO_Init+0x1e4>
 80009ea:	2302      	movs	r3, #2
 80009ec:	e002      	b.n	80009f4 <HAL_GPIO_Init+0x1e4>
 80009ee:	2301      	movs	r3, #1
 80009f0:	e000      	b.n	80009f4 <HAL_GPIO_Init+0x1e4>
 80009f2:	2300      	movs	r3, #0
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	2103      	movs	r1, #3
 80009f8:	400a      	ands	r2, r1
 80009fa:	0092      	lsls	r2, r2, #2
 80009fc:	4093      	lsls	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a04:	4935      	ldr	r1, [pc, #212]	; (8000adc <HAL_GPIO_Init+0x2cc>)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	089b      	lsrs	r3, r3, #2
 8000a0a:	3302      	adds	r3, #2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a12:	4b36      	ldr	r3, [pc, #216]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685a      	ldr	r2, [r3, #4]
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	025b      	lsls	r3, r3, #9
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000a3c:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	43da      	mvns	r2, r3
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	029b      	lsls	r3, r3, #10
 8000a54:	4013      	ands	r3, r2
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	2380      	movs	r3, #128	; 0x80
 8000a7c:	035b      	lsls	r3, r3, #13
 8000a7e:	4013      	ands	r3, r2
 8000a80:	d003      	beq.n	8000a8a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	43da      	mvns	r2, r3
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	039b      	lsls	r3, r3, #14
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	d003      	beq.n	8000ab4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_GPIO_Init+0x2dc>)
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	40da      	lsrs	r2, r3
 8000ac8:	1e13      	subs	r3, r2, #0
 8000aca:	d000      	beq.n	8000ace <HAL_GPIO_Init+0x2be>
 8000acc:	e6a8      	b.n	8000820 <HAL_GPIO_Init+0x10>
  } 
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b006      	add	sp, #24
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010000 	.word	0x40010000
 8000ae0:	48000400 	.word	0x48000400
 8000ae4:	48000800 	.word	0x48000800
 8000ae8:	48000c00 	.word	0x48000c00
 8000aec:	40010400 	.word	0x40010400

08000af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	0008      	movs	r0, r1
 8000afa:	0011      	movs	r1, r2
 8000afc:	1cbb      	adds	r3, r7, #2
 8000afe:	1c02      	adds	r2, r0, #0
 8000b00:	801a      	strh	r2, [r3, #0]
 8000b02:	1c7b      	adds	r3, r7, #1
 8000b04:	1c0a      	adds	r2, r1, #0
 8000b06:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b08:	1c7b      	adds	r3, r7, #1
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d004      	beq.n	8000b1a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b10:	1cbb      	adds	r3, r7, #2
 8000b12:	881a      	ldrh	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b18:	e003      	b.n	8000b22 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b1a:	1cbb      	adds	r3, r7, #2
 8000b1c:	881a      	ldrh	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b002      	add	sp, #8
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e305      	b.n	800114a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2201      	movs	r2, #1
 8000b44:	4013      	ands	r3, r2
 8000b46:	d100      	bne.n	8000b4a <HAL_RCC_OscConfig+0x1e>
 8000b48:	e08d      	b.n	8000c66 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b4a:	4bc5      	ldr	r3, [pc, #788]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	220c      	movs	r2, #12
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d00e      	beq.n	8000b74 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b56:	4bc2      	ldr	r3, [pc, #776]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d116      	bne.n	8000b90 <HAL_RCC_OscConfig+0x64>
 8000b62:	4bbf      	ldr	r3, [pc, #764]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	23c0      	movs	r3, #192	; 0xc0
 8000b68:	025b      	lsls	r3, r3, #9
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	025b      	lsls	r3, r3, #9
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d10d      	bne.n	8000b90 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b74:	4bba      	ldr	r3, [pc, #744]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	029b      	lsls	r3, r3, #10
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	d100      	bne.n	8000b82 <HAL_RCC_OscConfig+0x56>
 8000b80:	e070      	b.n	8000c64 <HAL_RCC_OscConfig+0x138>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d000      	beq.n	8000b8c <HAL_RCC_OscConfig+0x60>
 8000b8a:	e06b      	b.n	8000c64 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e2dc      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d107      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x7c>
 8000b98:	4bb1      	ldr	r3, [pc, #708]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4bb0      	ldr	r3, [pc, #704]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	0249      	lsls	r1, r1, #9
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	e02f      	b.n	8000c08 <HAL_RCC_OscConfig+0xdc>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10c      	bne.n	8000bca <HAL_RCC_OscConfig+0x9e>
 8000bb0:	4bab      	ldr	r3, [pc, #684]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4baa      	ldr	r3, [pc, #680]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000bb6:	49ab      	ldr	r1, [pc, #684]	; (8000e64 <HAL_RCC_OscConfig+0x338>)
 8000bb8:	400a      	ands	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	4ba8      	ldr	r3, [pc, #672]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4ba7      	ldr	r3, [pc, #668]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000bc2:	49a9      	ldr	r1, [pc, #676]	; (8000e68 <HAL_RCC_OscConfig+0x33c>)
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	e01e      	b.n	8000c08 <HAL_RCC_OscConfig+0xdc>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b05      	cmp	r3, #5
 8000bd0:	d10e      	bne.n	8000bf0 <HAL_RCC_OscConfig+0xc4>
 8000bd2:	4ba3      	ldr	r3, [pc, #652]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4ba2      	ldr	r3, [pc, #648]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	02c9      	lsls	r1, r1, #11
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	4b9f      	ldr	r3, [pc, #636]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b9e      	ldr	r3, [pc, #632]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	0249      	lsls	r1, r1, #9
 8000bea:	430a      	orrs	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e00b      	b.n	8000c08 <HAL_RCC_OscConfig+0xdc>
 8000bf0:	4b9b      	ldr	r3, [pc, #620]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b9a      	ldr	r3, [pc, #616]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000bf6:	499b      	ldr	r1, [pc, #620]	; (8000e64 <HAL_RCC_OscConfig+0x338>)
 8000bf8:	400a      	ands	r2, r1
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	4b98      	ldr	r3, [pc, #608]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b97      	ldr	r3, [pc, #604]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000c02:	4999      	ldr	r1, [pc, #612]	; (8000e68 <HAL_RCC_OscConfig+0x33c>)
 8000c04:	400a      	ands	r2, r1
 8000c06:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d014      	beq.n	8000c3a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c10:	f7ff fd40 	bl	8000694 <HAL_GetTick>
 8000c14:	0003      	movs	r3, r0
 8000c16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c18:	e008      	b.n	8000c2c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c1a:	f7ff fd3b 	bl	8000694 <HAL_GetTick>
 8000c1e:	0002      	movs	r2, r0
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	2b64      	cmp	r3, #100	; 0x64
 8000c26:	d901      	bls.n	8000c2c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	e28e      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2c:	4b8c      	ldr	r3, [pc, #560]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	029b      	lsls	r3, r3, #10
 8000c34:	4013      	ands	r3, r2
 8000c36:	d0f0      	beq.n	8000c1a <HAL_RCC_OscConfig+0xee>
 8000c38:	e015      	b.n	8000c66 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3a:	f7ff fd2b 	bl	8000694 <HAL_GetTick>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c44:	f7ff fd26 	bl	8000694 <HAL_GetTick>
 8000c48:	0002      	movs	r2, r0
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b64      	cmp	r3, #100	; 0x64
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e279      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c56:	4b82      	ldr	r3, [pc, #520]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	2380      	movs	r3, #128	; 0x80
 8000c5c:	029b      	lsls	r3, r3, #10
 8000c5e:	4013      	ands	r3, r2
 8000c60:	d1f0      	bne.n	8000c44 <HAL_RCC_OscConfig+0x118>
 8000c62:	e000      	b.n	8000c66 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c64:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d100      	bne.n	8000c72 <HAL_RCC_OscConfig+0x146>
 8000c70:	e06c      	b.n	8000d4c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c72:	4b7b      	ldr	r3, [pc, #492]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	220c      	movs	r2, #12
 8000c78:	4013      	ands	r3, r2
 8000c7a:	d00e      	beq.n	8000c9a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c7c:	4b78      	ldr	r3, [pc, #480]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	220c      	movs	r2, #12
 8000c82:	4013      	ands	r3, r2
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d11f      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x19c>
 8000c88:	4b75      	ldr	r3, [pc, #468]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	23c0      	movs	r3, #192	; 0xc0
 8000c8e:	025b      	lsls	r3, r3, #9
 8000c90:	401a      	ands	r2, r3
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d116      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c9a:	4b71      	ldr	r3, [pc, #452]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	d005      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x184>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d001      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e24c      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb0:	4b6b      	ldr	r3, [pc, #428]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	22f8      	movs	r2, #248	; 0xf8
 8000cb6:	4393      	bics	r3, r2
 8000cb8:	0019      	movs	r1, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	00da      	lsls	r2, r3, #3
 8000cc0:	4b67      	ldr	r3, [pc, #412]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc6:	e041      	b.n	8000d4c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d024      	beq.n	8000d1a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cd0:	4b63      	ldr	r3, [pc, #396]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b62      	ldr	r3, [pc, #392]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fcda 	bl	8000694 <HAL_GetTick>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce4:	e008      	b.n	8000cf8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce6:	f7ff fcd5 	bl	8000694 <HAL_GetTick>
 8000cea:	0002      	movs	r2, r0
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d901      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e228      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf8:	4b59      	ldr	r3, [pc, #356]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	4013      	ands	r3, r2
 8000d00:	d0f1      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d02:	4b57      	ldr	r3, [pc, #348]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	22f8      	movs	r2, #248	; 0xf8
 8000d08:	4393      	bics	r3, r2
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	00da      	lsls	r2, r3, #3
 8000d12:	4b53      	ldr	r3, [pc, #332]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000d14:	430a      	orrs	r2, r1
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	e018      	b.n	8000d4c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d1a:	4b51      	ldr	r3, [pc, #324]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4b50      	ldr	r3, [pc, #320]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000d20:	2101      	movs	r1, #1
 8000d22:	438a      	bics	r2, r1
 8000d24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d26:	f7ff fcb5 	bl	8000694 <HAL_GetTick>
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2e:	e008      	b.n	8000d42 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d30:	f7ff fcb0 	bl	8000694 <HAL_GetTick>
 8000d34:	0002      	movs	r2, r0
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e203      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d42:	4b47      	ldr	r3, [pc, #284]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2202      	movs	r2, #2
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d1f1      	bne.n	8000d30 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2208      	movs	r2, #8
 8000d52:	4013      	ands	r3, r2
 8000d54:	d036      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d019      	beq.n	8000d92 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d5e:	4b40      	ldr	r3, [pc, #256]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d62:	4b3f      	ldr	r3, [pc, #252]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000d64:	2101      	movs	r1, #1
 8000d66:	430a      	orrs	r2, r1
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d6a:	f7ff fc93 	bl	8000694 <HAL_GetTick>
 8000d6e:	0003      	movs	r3, r0
 8000d70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d74:	f7ff fc8e 	bl	8000694 <HAL_GetTick>
 8000d78:	0002      	movs	r2, r0
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e1e1      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d86:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	d0f1      	beq.n	8000d74 <HAL_RCC_OscConfig+0x248>
 8000d90:	e018      	b.n	8000dc4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d92:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d96:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	438a      	bics	r2, r1
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d9e:	f7ff fc79 	bl	8000694 <HAL_GetTick>
 8000da2:	0003      	movs	r3, r0
 8000da4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000da8:	f7ff fc74 	bl	8000694 <HAL_GetTick>
 8000dac:	0002      	movs	r2, r0
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e1c7      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dba:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	d1f1      	bne.n	8000da8 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2204      	movs	r2, #4
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d100      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x2a4>
 8000dce:	e0b5      	b.n	8000f3c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dd0:	231f      	movs	r3, #31
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dd8:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000dda:	69da      	ldr	r2, [r3, #28]
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	055b      	lsls	r3, r3, #21
 8000de0:	4013      	ands	r3, r2
 8000de2:	d111      	bne.n	8000e08 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000de6:	69da      	ldr	r2, [r3, #28]
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000dea:	2180      	movs	r1, #128	; 0x80
 8000dec:	0549      	lsls	r1, r1, #21
 8000dee:	430a      	orrs	r2, r1
 8000df0:	61da      	str	r2, [r3, #28]
 8000df2:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000df4:	69da      	ldr	r2, [r3, #28]
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	055b      	lsls	r3, r3, #21
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e00:	231f      	movs	r3, #31
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_RCC_OscConfig+0x340>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4013      	ands	r3, r2
 8000e12:	d11a      	bne.n	8000e4a <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_RCC_OscConfig+0x340>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_RCC_OscConfig+0x340>)
 8000e1a:	2180      	movs	r1, #128	; 0x80
 8000e1c:	0049      	lsls	r1, r1, #1
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e22:	f7ff fc37 	bl	8000694 <HAL_GetTick>
 8000e26:	0003      	movs	r3, r0
 8000e28:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e2c:	f7ff fc32 	bl	8000694 <HAL_GetTick>
 8000e30:	0002      	movs	r2, r0
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b64      	cmp	r3, #100	; 0x64
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e185      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_RCC_OscConfig+0x340>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4013      	ands	r3, r2
 8000e48:	d0f0      	beq.n	8000e2c <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d10e      	bne.n	8000e70 <HAL_RCC_OscConfig+0x344>
 8000e52:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000e54:	6a1a      	ldr	r2, [r3, #32]
 8000e56:	4b02      	ldr	r3, [pc, #8]	; (8000e60 <HAL_RCC_OscConfig+0x334>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	621a      	str	r2, [r3, #32]
 8000e5e:	e035      	b.n	8000ecc <HAL_RCC_OscConfig+0x3a0>
 8000e60:	40021000 	.word	0x40021000
 8000e64:	fffeffff 	.word	0xfffeffff
 8000e68:	fffbffff 	.word	0xfffbffff
 8000e6c:	40007000 	.word	0x40007000
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10c      	bne.n	8000e92 <HAL_RCC_OscConfig+0x366>
 8000e78:	4bb6      	ldr	r3, [pc, #728]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000e7a:	6a1a      	ldr	r2, [r3, #32]
 8000e7c:	4bb5      	ldr	r3, [pc, #724]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000e7e:	2101      	movs	r1, #1
 8000e80:	438a      	bics	r2, r1
 8000e82:	621a      	str	r2, [r3, #32]
 8000e84:	4bb3      	ldr	r3, [pc, #716]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000e86:	6a1a      	ldr	r2, [r3, #32]
 8000e88:	4bb2      	ldr	r3, [pc, #712]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	438a      	bics	r2, r1
 8000e8e:	621a      	str	r2, [r3, #32]
 8000e90:	e01c      	b.n	8000ecc <HAL_RCC_OscConfig+0x3a0>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2b05      	cmp	r3, #5
 8000e98:	d10c      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x388>
 8000e9a:	4bae      	ldr	r3, [pc, #696]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000e9c:	6a1a      	ldr	r2, [r3, #32]
 8000e9e:	4bad      	ldr	r3, [pc, #692]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	621a      	str	r2, [r3, #32]
 8000ea6:	4bab      	ldr	r3, [pc, #684]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000ea8:	6a1a      	ldr	r2, [r3, #32]
 8000eaa:	4baa      	ldr	r3, [pc, #680]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000eac:	2101      	movs	r1, #1
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	621a      	str	r2, [r3, #32]
 8000eb2:	e00b      	b.n	8000ecc <HAL_RCC_OscConfig+0x3a0>
 8000eb4:	4ba7      	ldr	r3, [pc, #668]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000eb6:	6a1a      	ldr	r2, [r3, #32]
 8000eb8:	4ba6      	ldr	r3, [pc, #664]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	438a      	bics	r2, r1
 8000ebe:	621a      	str	r2, [r3, #32]
 8000ec0:	4ba4      	ldr	r3, [pc, #656]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000ec2:	6a1a      	ldr	r2, [r3, #32]
 8000ec4:	4ba3      	ldr	r3, [pc, #652]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	438a      	bics	r2, r1
 8000eca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d014      	beq.n	8000efe <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed4:	f7ff fbde 	bl	8000694 <HAL_GetTick>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000edc:	e009      	b.n	8000ef2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ede:	f7ff fbd9 	bl	8000694 <HAL_GetTick>
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	4a9b      	ldr	r2, [pc, #620]	; (8001158 <HAL_RCC_OscConfig+0x62c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e12b      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef2:	4b98      	ldr	r3, [pc, #608]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d0f0      	beq.n	8000ede <HAL_RCC_OscConfig+0x3b2>
 8000efc:	e013      	b.n	8000f26 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efe:	f7ff fbc9 	bl	8000694 <HAL_GetTick>
 8000f02:	0003      	movs	r3, r0
 8000f04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f06:	e009      	b.n	8000f1c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f08:	f7ff fbc4 	bl	8000694 <HAL_GetTick>
 8000f0c:	0002      	movs	r2, r0
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	4a91      	ldr	r2, [pc, #580]	; (8001158 <HAL_RCC_OscConfig+0x62c>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e116      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f1c:	4b8d      	ldr	r3, [pc, #564]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	2202      	movs	r2, #2
 8000f22:	4013      	ands	r3, r2
 8000f24:	d1f0      	bne.n	8000f08 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f26:	231f      	movs	r3, #31
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d105      	bne.n	8000f3c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f30:	4b88      	ldr	r3, [pc, #544]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000f32:	69da      	ldr	r2, [r3, #28]
 8000f34:	4b87      	ldr	r3, [pc, #540]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000f36:	4989      	ldr	r1, [pc, #548]	; (800115c <HAL_RCC_OscConfig+0x630>)
 8000f38:	400a      	ands	r2, r1
 8000f3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2210      	movs	r2, #16
 8000f42:	4013      	ands	r3, r2
 8000f44:	d063      	beq.n	800100e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d12a      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f4e:	4b81      	ldr	r3, [pc, #516]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f52:	4b80      	ldr	r3, [pc, #512]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000f54:	2104      	movs	r1, #4
 8000f56:	430a      	orrs	r2, r1
 8000f58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000f5a:	4b7e      	ldr	r3, [pc, #504]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f5e:	4b7d      	ldr	r3, [pc, #500]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	430a      	orrs	r2, r1
 8000f64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f66:	f7ff fb95 	bl	8000694 <HAL_GetTick>
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f70:	f7ff fb90 	bl	8000694 <HAL_GetTick>
 8000f74:	0002      	movs	r2, r0
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e0e3      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f82:	4b74      	ldr	r3, [pc, #464]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	2202      	movs	r2, #2
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d0f1      	beq.n	8000f70 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f8c:	4b71      	ldr	r3, [pc, #452]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f90:	22f8      	movs	r2, #248	; 0xf8
 8000f92:	4393      	bics	r3, r2
 8000f94:	0019      	movs	r1, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	00da      	lsls	r2, r3, #3
 8000f9c:	4b6d      	ldr	r3, [pc, #436]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34
 8000fa2:	e034      	b.n	800100e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	3305      	adds	r3, #5
 8000faa:	d111      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000fac:	4b69      	ldr	r3, [pc, #420]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fb0:	4b68      	ldr	r3, [pc, #416]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	438a      	bics	r2, r1
 8000fb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fb8:	4b66      	ldr	r3, [pc, #408]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fbc:	22f8      	movs	r2, #248	; 0xf8
 8000fbe:	4393      	bics	r3, r2
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	00da      	lsls	r2, r3, #3
 8000fc8:	4b62      	ldr	r3, [pc, #392]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000fce:	e01e      	b.n	800100e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000fd0:	4b60      	ldr	r3, [pc, #384]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fd4:	4b5f      	ldr	r3, [pc, #380]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000fdc:	4b5d      	ldr	r3, [pc, #372]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe0:	4b5c      	ldr	r3, [pc, #368]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	438a      	bics	r2, r1
 8000fe6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe8:	f7ff fb54 	bl	8000694 <HAL_GetTick>
 8000fec:	0003      	movs	r3, r0
 8000fee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ff2:	f7ff fb4f 	bl	8000694 <HAL_GetTick>
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e0a2      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001004:	4b53      	ldr	r3, [pc, #332]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8001006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001008:	2202      	movs	r2, #2
 800100a:	4013      	ands	r3, r2
 800100c:	d1f1      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d100      	bne.n	8001018 <HAL_RCC_OscConfig+0x4ec>
 8001016:	e097      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001018:	4b4e      	ldr	r3, [pc, #312]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	220c      	movs	r2, #12
 800101e:	4013      	ands	r3, r2
 8001020:	2b08      	cmp	r3, #8
 8001022:	d100      	bne.n	8001026 <HAL_RCC_OscConfig+0x4fa>
 8001024:	e06b      	b.n	80010fe <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d14c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800102e:	4b49      	ldr	r3, [pc, #292]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4b48      	ldr	r3, [pc, #288]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8001034:	494a      	ldr	r1, [pc, #296]	; (8001160 <HAL_RCC_OscConfig+0x634>)
 8001036:	400a      	ands	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fb2b 	bl	8000694 <HAL_GetTick>
 800103e:	0003      	movs	r3, r0
 8001040:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001044:	f7ff fb26 	bl	8000694 <HAL_GetTick>
 8001048:	0002      	movs	r2, r0
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e079      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001056:	4b3f      	ldr	r3, [pc, #252]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	049b      	lsls	r3, r3, #18
 800105e:	4013      	ands	r3, r2
 8001060:	d1f0      	bne.n	8001044 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001062:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8001064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001066:	220f      	movs	r2, #15
 8001068:	4393      	bics	r3, r2
 800106a:	0019      	movs	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001070:	4b38      	ldr	r3, [pc, #224]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8001072:	430a      	orrs	r2, r1
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c
 8001076:	4b37      	ldr	r3, [pc, #220]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4a3a      	ldr	r2, [pc, #232]	; (8001164 <HAL_RCC_OscConfig+0x638>)
 800107c:	4013      	ands	r3, r2
 800107e:	0019      	movs	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	431a      	orrs	r2, r3
 800108a:	4b32      	ldr	r3, [pc, #200]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 800108c:	430a      	orrs	r2, r1
 800108e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	0449      	lsls	r1, r1, #17
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff faf9 	bl	8000694 <HAL_GetTick>
 80010a2:	0003      	movs	r3, r0
 80010a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a8:	f7ff faf4 	bl	8000694 <HAL_GetTick>
 80010ac:	0002      	movs	r2, r0
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e047      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	049b      	lsls	r3, r3, #18
 80010c2:	4013      	ands	r3, r2
 80010c4:	d0f0      	beq.n	80010a8 <HAL_RCC_OscConfig+0x57c>
 80010c6:	e03f      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 80010ce:	4924      	ldr	r1, [pc, #144]	; (8001160 <HAL_RCC_OscConfig+0x634>)
 80010d0:	400a      	ands	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fade 	bl	8000694 <HAL_GetTick>
 80010d8:	0003      	movs	r3, r0
 80010da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010de:	f7ff fad9 	bl	8000694 <HAL_GetTick>
 80010e2:	0002      	movs	r2, r0
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e02c      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	049b      	lsls	r3, r3, #18
 80010f8:	4013      	ands	r3, r2
 80010fa:	d1f0      	bne.n	80010de <HAL_RCC_OscConfig+0x5b2>
 80010fc:	e024      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d101      	bne.n	800110a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e01f      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 8001112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001114:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	23c0      	movs	r3, #192	; 0xc0
 800111a:	025b      	lsls	r3, r3, #9
 800111c:	401a      	ands	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	429a      	cmp	r2, r3
 8001124:	d10e      	bne.n	8001144 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	220f      	movs	r2, #15
 800112a:	401a      	ands	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001130:	429a      	cmp	r2, r3
 8001132:	d107      	bne.n	8001144 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	23f0      	movs	r3, #240	; 0xf0
 8001138:	039b      	lsls	r3, r3, #14
 800113a:	401a      	ands	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001140:	429a      	cmp	r2, r3
 8001142:	d001      	beq.n	8001148 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b008      	add	sp, #32
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	40021000 	.word	0x40021000
 8001158:	00001388 	.word	0x00001388
 800115c:	efffffff 	.word	0xefffffff
 8001160:	feffffff 	.word	0xfeffffff
 8001164:	ffc27fff 	.word	0xffc27fff

08001168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0b3      	b.n	80012e4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800117c:	4b5b      	ldr	r3, [pc, #364]	; (80012ec <HAL_RCC_ClockConfig+0x184>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2201      	movs	r2, #1
 8001182:	4013      	ands	r3, r2
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d911      	bls.n	80011ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118a:	4b58      	ldr	r3, [pc, #352]	; (80012ec <HAL_RCC_ClockConfig+0x184>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2201      	movs	r2, #1
 8001190:	4393      	bics	r3, r2
 8001192:	0019      	movs	r1, r3
 8001194:	4b55      	ldr	r3, [pc, #340]	; (80012ec <HAL_RCC_ClockConfig+0x184>)
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800119c:	4b53      	ldr	r3, [pc, #332]	; (80012ec <HAL_RCC_ClockConfig+0x184>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2201      	movs	r2, #1
 80011a2:	4013      	ands	r3, r2
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d001      	beq.n	80011ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e09a      	b.n	80012e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	d015      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2204      	movs	r2, #4
 80011be:	4013      	ands	r3, r2
 80011c0:	d006      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011c2:	4b4b      	ldr	r3, [pc, #300]	; (80012f0 <HAL_RCC_ClockConfig+0x188>)
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <HAL_RCC_ClockConfig+0x188>)
 80011c8:	21e0      	movs	r1, #224	; 0xe0
 80011ca:	00c9      	lsls	r1, r1, #3
 80011cc:	430a      	orrs	r2, r1
 80011ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d0:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <HAL_RCC_ClockConfig+0x188>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	22f0      	movs	r2, #240	; 0xf0
 80011d6:	4393      	bics	r3, r2
 80011d8:	0019      	movs	r1, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <HAL_RCC_ClockConfig+0x188>)
 80011e0:	430a      	orrs	r2, r1
 80011e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2201      	movs	r2, #1
 80011ea:	4013      	ands	r3, r2
 80011ec:	d040      	beq.n	8001270 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <HAL_RCC_ClockConfig+0x188>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	029b      	lsls	r3, r3, #10
 80011fe:	4013      	ands	r3, r2
 8001200:	d114      	bne.n	800122c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e06e      	b.n	80012e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d107      	bne.n	800121e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800120e:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <HAL_RCC_ClockConfig+0x188>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	049b      	lsls	r3, r3, #18
 8001216:	4013      	ands	r3, r2
 8001218:	d108      	bne.n	800122c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e062      	b.n	80012e4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <HAL_RCC_ClockConfig+0x188>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2202      	movs	r2, #2
 8001224:	4013      	ands	r3, r2
 8001226:	d101      	bne.n	800122c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e05b      	b.n	80012e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_RCC_ClockConfig+0x188>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2203      	movs	r2, #3
 8001232:	4393      	bics	r3, r2
 8001234:	0019      	movs	r1, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_RCC_ClockConfig+0x188>)
 800123c:	430a      	orrs	r2, r1
 800123e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001240:	f7ff fa28 	bl	8000694 <HAL_GetTick>
 8001244:	0003      	movs	r3, r0
 8001246:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001248:	e009      	b.n	800125e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800124a:	f7ff fa23 	bl	8000694 <HAL_GetTick>
 800124e:	0002      	movs	r2, r0
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <HAL_RCC_ClockConfig+0x18c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d901      	bls.n	800125e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e042      	b.n	80012e4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <HAL_RCC_ClockConfig+0x188>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	220c      	movs	r2, #12
 8001264:	401a      	ands	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	429a      	cmp	r2, r3
 800126e:	d1ec      	bne.n	800124a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <HAL_RCC_ClockConfig+0x184>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2201      	movs	r2, #1
 8001276:	4013      	ands	r3, r2
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d211      	bcs.n	80012a2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_RCC_ClockConfig+0x184>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2201      	movs	r2, #1
 8001284:	4393      	bics	r3, r2
 8001286:	0019      	movs	r1, r3
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_RCC_ClockConfig+0x184>)
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <HAL_RCC_ClockConfig+0x184>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	4013      	ands	r3, r2
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e020      	b.n	80012e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2204      	movs	r2, #4
 80012a8:	4013      	ands	r3, r2
 80012aa:	d009      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_RCC_ClockConfig+0x188>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <HAL_RCC_ClockConfig+0x190>)
 80012b2:	4013      	ands	r3, r2
 80012b4:	0019      	movs	r1, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_RCC_ClockConfig+0x188>)
 80012bc:	430a      	orrs	r2, r1
 80012be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012c0:	f000 f820 	bl	8001304 <HAL_RCC_GetSysClockFreq>
 80012c4:	0001      	movs	r1, r0
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_RCC_ClockConfig+0x188>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	220f      	movs	r2, #15
 80012ce:	4013      	ands	r3, r2
 80012d0:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <HAL_RCC_ClockConfig+0x194>)
 80012d2:	5cd3      	ldrb	r3, [r2, r3]
 80012d4:	000a      	movs	r2, r1
 80012d6:	40da      	lsrs	r2, r3
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_RCC_ClockConfig+0x198>)
 80012da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff f993 	bl	8000608 <HAL_InitTick>
  
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b004      	add	sp, #16
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40022000 	.word	0x40022000
 80012f0:	40021000 	.word	0x40021000
 80012f4:	00001388 	.word	0x00001388
 80012f8:	fffff8ff 	.word	0xfffff8ff
 80012fc:	08001f20 	.word	0x08001f20
 8001300:	20000000 	.word	0x20000000

08001304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b08f      	sub	sp, #60	; 0x3c
 8001308:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800130a:	2314      	movs	r3, #20
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	4a2c      	ldr	r2, [pc, #176]	; (80013c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001310:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001312:	c313      	stmia	r3!, {r0, r1, r4}
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4a2a      	ldr	r2, [pc, #168]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800131c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800131e:	c313      	stmia	r3!, {r0, r1, r4}
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
 800132c:	2300      	movs	r3, #0
 800132e:	637b      	str	r3, [r7, #52]	; 0x34
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	220c      	movs	r2, #12
 8001342:	4013      	ands	r3, r2
 8001344:	2b04      	cmp	r3, #4
 8001346:	d002      	beq.n	800134e <HAL_RCC_GetSysClockFreq+0x4a>
 8001348:	2b08      	cmp	r3, #8
 800134a:	d003      	beq.n	8001354 <HAL_RCC_GetSysClockFreq+0x50>
 800134c:	e02f      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001352:	e02f      	b.n	80013b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001356:	0c9b      	lsrs	r3, r3, #18
 8001358:	220f      	movs	r2, #15
 800135a:	4013      	ands	r3, r2
 800135c:	2214      	movs	r2, #20
 800135e:	18ba      	adds	r2, r7, r2
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	220f      	movs	r2, #15
 800136a:	4013      	ands	r3, r2
 800136c:	1d3a      	adds	r2, r7, #4
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001374:	23c0      	movs	r3, #192	; 0xc0
 8001376:	025b      	lsls	r3, r3, #9
 8001378:	401a      	ands	r2, r3
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	025b      	lsls	r3, r3, #9
 800137e:	429a      	cmp	r2, r3
 8001380:	d109      	bne.n	8001396 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001384:	4811      	ldr	r0, [pc, #68]	; (80013cc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001386:	f7fe febf 	bl	8000108 <__udivsi3>
 800138a:	0003      	movs	r3, r0
 800138c:	001a      	movs	r2, r3
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	4353      	muls	r3, r2
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
 8001394:	e008      	b.n	80013a8 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800139a:	f7fe feb5 	bl	8000108 <__udivsi3>
 800139e:	0003      	movs	r3, r0
 80013a0:	001a      	movs	r2, r3
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	4353      	muls	r3, r2
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80013a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013ac:	e002      	b.n	80013b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013b2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80013b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b00f      	add	sp, #60	; 0x3c
 80013bc:	bd90      	pop	{r4, r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	08001f00 	.word	0x08001f00
 80013c4:	08001f10 	.word	0x08001f10
 80013c8:	40021000 	.word	0x40021000
 80013cc:	007a1200 	.word	0x007a1200

080013d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013d4:	4b02      	ldr	r3, [pc, #8]	; (80013e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	20000000 	.word	0x20000000

080013e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80013e8:	f7ff fff2 	bl	80013d0 <HAL_RCC_GetHCLKFreq>
 80013ec:	0001      	movs	r1, r0
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	0a1b      	lsrs	r3, r3, #8
 80013f4:	2207      	movs	r2, #7
 80013f6:	4013      	ands	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_RCC_GetPCLK1Freq+0x28>)
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	40d9      	lsrs	r1, r3
 80013fe:	000b      	movs	r3, r1
}    
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	40021000 	.word	0x40021000
 800140c:	08001f30 	.word	0x08001f30

08001410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	025b      	lsls	r3, r3, #9
 8001428:	4013      	ands	r3, r2
 800142a:	d100      	bne.n	800142e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800142c:	e08f      	b.n	800154e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800142e:	2317      	movs	r3, #23
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001436:	4b5f      	ldr	r3, [pc, #380]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001438:	69da      	ldr	r2, [r3, #28]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	055b      	lsls	r3, r3, #21
 800143e:	4013      	ands	r3, r2
 8001440:	d111      	bne.n	8001466 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	4b5c      	ldr	r3, [pc, #368]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001444:	69da      	ldr	r2, [r3, #28]
 8001446:	4b5b      	ldr	r3, [pc, #364]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	0549      	lsls	r1, r1, #21
 800144c:	430a      	orrs	r2, r1
 800144e:	61da      	str	r2, [r3, #28]
 8001450:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001452:	69da      	ldr	r2, [r3, #28]
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	055b      	lsls	r3, r3, #21
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800145e:	2317      	movs	r3, #23
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4013      	ands	r3, r2
 8001470:	d11a      	bne.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	0049      	lsls	r1, r1, #1
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001480:	f7ff f908 	bl	8000694 <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001488:	e008      	b.n	800149c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148a:	f7ff f903 	bl	8000694 <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b64      	cmp	r3, #100	; 0x64
 8001496:	d901      	bls.n	800149c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e087      	b.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149c:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4013      	ands	r3, r2
 80014a6:	d0f0      	beq.n	800148a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014a8:	4b42      	ldr	r3, [pc, #264]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014aa:	6a1a      	ldr	r2, [r3, #32]
 80014ac:	23c0      	movs	r3, #192	; 0xc0
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4013      	ands	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d034      	beq.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	23c0      	movs	r3, #192	; 0xc0
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4013      	ands	r3, r2
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d02c      	beq.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a3b      	ldr	r2, [pc, #236]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80014d4:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014d6:	6a1a      	ldr	r2, [r3, #32]
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	0249      	lsls	r1, r1, #9
 80014de:	430a      	orrs	r2, r1
 80014e0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014e2:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014e4:	6a1a      	ldr	r2, [r3, #32]
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014e8:	4935      	ldr	r1, [pc, #212]	; (80015c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80014ea:	400a      	ands	r2, r1
 80014ec:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2201      	movs	r2, #1
 80014f8:	4013      	ands	r3, r2
 80014fa:	d013      	beq.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff f8ca 	bl	8000694 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001504:	e009      	b.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7ff f8c5 	bl	8000694 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	4a2c      	ldr	r2, [pc, #176]	; (80015c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e048      	b.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	2202      	movs	r2, #2
 8001520:	4013      	ands	r3, r2
 8001522:	d0f0      	beq.n	8001506 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001524:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4a24      	ldr	r2, [pc, #144]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800152a:	4013      	ands	r3, r2
 800152c:	0019      	movs	r1, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001534:	430a      	orrs	r2, r1
 8001536:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001538:	2317      	movs	r3, #23
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d105      	bne.n	800154e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001544:	69da      	ldr	r2, [r3, #28]
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001548:	491f      	ldr	r1, [pc, #124]	; (80015c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800154a:	400a      	ands	r2, r1
 800154c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	4013      	ands	r3, r2
 8001556:	d009      	beq.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	2203      	movs	r2, #3
 800155e:	4393      	bics	r3, r2
 8001560:	0019      	movs	r1, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001568:	430a      	orrs	r2, r1
 800156a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2220      	movs	r2, #32
 8001572:	4013      	ands	r3, r2
 8001574:	d009      	beq.n	800158a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	2210      	movs	r2, #16
 800157c:	4393      	bics	r3, r2
 800157e:	0019      	movs	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001586:	430a      	orrs	r2, r1
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	029b      	lsls	r3, r3, #10
 8001592:	4013      	ands	r3, r2
 8001594:	d009      	beq.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	4393      	bics	r3, r2
 800159e:	0019      	movs	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015a6:	430a      	orrs	r2, r1
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b006      	add	sp, #24
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40007000 	.word	0x40007000
 80015bc:	fffffcff 	.word	0xfffffcff
 80015c0:	fffeffff 	.word	0xfffeffff
 80015c4:	00001388 	.word	0x00001388
 80015c8:	efffffff 	.word	0xefffffff

080015cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e044      	b.n	8001668 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d107      	bne.n	80015f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2274      	movs	r2, #116	; 0x74
 80015ea:	2100      	movs	r1, #0
 80015ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7fe ff5f 	bl	80004b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2224      	movs	r2, #36	; 0x24
 80015fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2101      	movs	r1, #1
 8001608:	438a      	bics	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	0018      	movs	r0, r3
 8001610:	f000 f830 	bl	8001674 <UART_SetConfig>
 8001614:	0003      	movs	r3, r0
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e024      	b.n	8001668 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	0018      	movs	r0, r3
 800162a:	f000 f979 	bl	8001920 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	490d      	ldr	r1, [pc, #52]	; (8001670 <HAL_UART_Init+0xa4>)
 800163a:	400a      	ands	r2, r1
 800163c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2108      	movs	r1, #8
 800164a:	438a      	bics	r2, r1
 800164c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2101      	movs	r1, #1
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	0018      	movs	r0, r3
 8001662:	f000 fa11 	bl	8001a88 <UART_CheckIdleState>
 8001666:	0003      	movs	r3, r0
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}
 8001670:	fffff7ff 	.word	0xfffff7ff

08001674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800167c:	231e      	movs	r3, #30
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	4313      	orrs	r3, r2
 800169a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a95      	ldr	r2, [pc, #596]	; (80018f8 <UART_SetConfig+0x284>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a90      	ldr	r2, [pc, #576]	; (80018fc <UART_SetConfig+0x288>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	0019      	movs	r1, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4a87      	ldr	r2, [pc, #540]	; (8001900 <UART_SetConfig+0x28c>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a83      	ldr	r2, [pc, #524]	; (8001904 <UART_SetConfig+0x290>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d125      	bne.n	8001746 <UART_SetConfig+0xd2>
 80016fa:	4b83      	ldr	r3, [pc, #524]	; (8001908 <UART_SetConfig+0x294>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	2203      	movs	r2, #3
 8001700:	4013      	ands	r3, r2
 8001702:	2b01      	cmp	r3, #1
 8001704:	d00f      	beq.n	8001726 <UART_SetConfig+0xb2>
 8001706:	d304      	bcc.n	8001712 <UART_SetConfig+0x9e>
 8001708:	2b02      	cmp	r3, #2
 800170a:	d011      	beq.n	8001730 <UART_SetConfig+0xbc>
 800170c:	2b03      	cmp	r3, #3
 800170e:	d005      	beq.n	800171c <UART_SetConfig+0xa8>
 8001710:	e013      	b.n	800173a <UART_SetConfig+0xc6>
 8001712:	231f      	movs	r3, #31
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	e036      	b.n	800178a <UART_SetConfig+0x116>
 800171c:	231f      	movs	r3, #31
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	2202      	movs	r2, #2
 8001722:	701a      	strb	r2, [r3, #0]
 8001724:	e031      	b.n	800178a <UART_SetConfig+0x116>
 8001726:	231f      	movs	r3, #31
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	2204      	movs	r2, #4
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	e02c      	b.n	800178a <UART_SetConfig+0x116>
 8001730:	231f      	movs	r3, #31
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	2208      	movs	r2, #8
 8001736:	701a      	strb	r2, [r3, #0]
 8001738:	e027      	b.n	800178a <UART_SetConfig+0x116>
 800173a:	231f      	movs	r3, #31
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	2210      	movs	r2, #16
 8001740:	701a      	strb	r2, [r3, #0]
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	e021      	b.n	800178a <UART_SetConfig+0x116>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a70      	ldr	r2, [pc, #448]	; (800190c <UART_SetConfig+0x298>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d104      	bne.n	800175a <UART_SetConfig+0xe6>
 8001750:	231f      	movs	r3, #31
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	e017      	b.n	800178a <UART_SetConfig+0x116>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a6c      	ldr	r2, [pc, #432]	; (8001910 <UART_SetConfig+0x29c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d104      	bne.n	800176e <UART_SetConfig+0xfa>
 8001764:	231f      	movs	r3, #31
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	e00d      	b.n	800178a <UART_SetConfig+0x116>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a68      	ldr	r2, [pc, #416]	; (8001914 <UART_SetConfig+0x2a0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d104      	bne.n	8001782 <UART_SetConfig+0x10e>
 8001778:	231f      	movs	r3, #31
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e003      	b.n	800178a <UART_SetConfig+0x116>
 8001782:	231f      	movs	r3, #31
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	2210      	movs	r2, #16
 8001788:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69da      	ldr	r2, [r3, #28]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	429a      	cmp	r2, r3
 8001794:	d15c      	bne.n	8001850 <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 8001796:	231f      	movs	r3, #31
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d00d      	beq.n	80017bc <UART_SetConfig+0x148>
 80017a0:	dc02      	bgt.n	80017a8 <UART_SetConfig+0x134>
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <UART_SetConfig+0x13e>
 80017a6:	e015      	b.n	80017d4 <UART_SetConfig+0x160>
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d00a      	beq.n	80017c2 <UART_SetConfig+0x14e>
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d00d      	beq.n	80017cc <UART_SetConfig+0x158>
 80017b0:	e010      	b.n	80017d4 <UART_SetConfig+0x160>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80017b2:	f7ff fe17 	bl	80013e4 <HAL_RCC_GetPCLK1Freq>
 80017b6:	0003      	movs	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]
        break;
 80017ba:	e012      	b.n	80017e2 <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80017bc:	4b56      	ldr	r3, [pc, #344]	; (8001918 <UART_SetConfig+0x2a4>)
 80017be:	61bb      	str	r3, [r7, #24]
        break;
 80017c0:	e00f      	b.n	80017e2 <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80017c2:	f7ff fd9f 	bl	8001304 <HAL_RCC_GetSysClockFreq>
 80017c6:	0003      	movs	r3, r0
 80017c8:	61bb      	str	r3, [r7, #24]
        break;
 80017ca:	e00a      	b.n	80017e2 <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	61bb      	str	r3, [r7, #24]
        break;
 80017d2:	e006      	b.n	80017e2 <UART_SetConfig+0x16e>
      default:
        pclk = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80017d8:	231e      	movs	r3, #30
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
        break;
 80017e0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d100      	bne.n	80017ea <UART_SetConfig+0x176>
 80017e8:	e079      	b.n	80018de <UART_SetConfig+0x26a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	005a      	lsls	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	085b      	lsrs	r3, r3, #1
 80017f4:	18d2      	adds	r2, r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	0019      	movs	r1, r3
 80017fc:	0010      	movs	r0, r2
 80017fe:	f7fe fc83 	bl	8000108 <__udivsi3>
 8001802:	0003      	movs	r3, r0
 8001804:	b29b      	uxth	r3, r3
 8001806:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	2b0f      	cmp	r3, #15
 800180c:	d91b      	bls.n	8001846 <UART_SetConfig+0x1d2>
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4a42      	ldr	r2, [pc, #264]	; (800191c <UART_SetConfig+0x2a8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d817      	bhi.n	8001846 <UART_SetConfig+0x1d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	b29a      	uxth	r2, r3
 800181a:	200e      	movs	r0, #14
 800181c:	183b      	adds	r3, r7, r0
 800181e:	210f      	movs	r1, #15
 8001820:	438a      	bics	r2, r1
 8001822:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	b29b      	uxth	r3, r3
 800182a:	2207      	movs	r2, #7
 800182c:	4013      	ands	r3, r2
 800182e:	b299      	uxth	r1, r3
 8001830:	183b      	adds	r3, r7, r0
 8001832:	183a      	adds	r2, r7, r0
 8001834:	8812      	ldrh	r2, [r2, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	183a      	adds	r2, r7, r0
 8001840:	8812      	ldrh	r2, [r2, #0]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	e04b      	b.n	80018de <UART_SetConfig+0x26a>
      }
      else
      {
        ret = HAL_ERROR;
 8001846:	231e      	movs	r3, #30
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	e046      	b.n	80018de <UART_SetConfig+0x26a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001850:	231f      	movs	r3, #31
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d00d      	beq.n	8001876 <UART_SetConfig+0x202>
 800185a:	dc02      	bgt.n	8001862 <UART_SetConfig+0x1ee>
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <UART_SetConfig+0x1f8>
 8001860:	e015      	b.n	800188e <UART_SetConfig+0x21a>
 8001862:	2b04      	cmp	r3, #4
 8001864:	d00a      	beq.n	800187c <UART_SetConfig+0x208>
 8001866:	2b08      	cmp	r3, #8
 8001868:	d00d      	beq.n	8001886 <UART_SetConfig+0x212>
 800186a:	e010      	b.n	800188e <UART_SetConfig+0x21a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800186c:	f7ff fdba 	bl	80013e4 <HAL_RCC_GetPCLK1Freq>
 8001870:	0003      	movs	r3, r0
 8001872:	61bb      	str	r3, [r7, #24]
        break;
 8001874:	e012      	b.n	800189c <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001876:	4b28      	ldr	r3, [pc, #160]	; (8001918 <UART_SetConfig+0x2a4>)
 8001878:	61bb      	str	r3, [r7, #24]
        break;
 800187a:	e00f      	b.n	800189c <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800187c:	f7ff fd42 	bl	8001304 <HAL_RCC_GetSysClockFreq>
 8001880:	0003      	movs	r3, r0
 8001882:	61bb      	str	r3, [r7, #24]
        break;
 8001884:	e00a      	b.n	800189c <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	61bb      	str	r3, [r7, #24]
        break;
 800188c:	e006      	b.n	800189c <UART_SetConfig+0x228>
      default:
        pclk = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001892:	231e      	movs	r3, #30
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
        break;
 800189a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d01d      	beq.n	80018de <UART_SetConfig+0x26a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	085a      	lsrs	r2, r3, #1
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	18d2      	adds	r2, r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	0019      	movs	r1, r3
 80018b2:	0010      	movs	r0, r2
 80018b4:	f7fe fc28 	bl	8000108 <__udivsi3>
 80018b8:	0003      	movs	r3, r0
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d908      	bls.n	80018d6 <UART_SetConfig+0x262>
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4a15      	ldr	r2, [pc, #84]	; (800191c <UART_SetConfig+0x2a8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d804      	bhi.n	80018d6 <UART_SetConfig+0x262>
      {
        huart->Instance->BRR = usartdiv;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	e003      	b.n	80018de <UART_SetConfig+0x26a>
      }
      else
      {
        ret = HAL_ERROR;
 80018d6:	231e      	movs	r3, #30
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80018ea:	231e      	movs	r3, #30
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	781b      	ldrb	r3, [r3, #0]
}
 80018f0:	0018      	movs	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b008      	add	sp, #32
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	efff69f3 	.word	0xefff69f3
 80018fc:	ffffcfff 	.word	0xffffcfff
 8001900:	fffff4ff 	.word	0xfffff4ff
 8001904:	40013800 	.word	0x40013800
 8001908:	40021000 	.word	0x40021000
 800190c:	40004400 	.word	0x40004400
 8001910:	40004800 	.word	0x40004800
 8001914:	40004c00 	.word	0x40004c00
 8001918:	007a1200 	.word	0x007a1200
 800191c:	0000ffff 	.word	0x0000ffff

08001920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	2201      	movs	r2, #1
 800192e:	4013      	ands	r3, r2
 8001930:	d00b      	beq.n	800194a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4a4a      	ldr	r2, [pc, #296]	; (8001a64 <UART_AdvFeatureConfig+0x144>)
 800193a:	4013      	ands	r3, r2
 800193c:	0019      	movs	r1, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	2202      	movs	r2, #2
 8001950:	4013      	ands	r3, r2
 8001952:	d00b      	beq.n	800196c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a43      	ldr	r2, [pc, #268]	; (8001a68 <UART_AdvFeatureConfig+0x148>)
 800195c:	4013      	ands	r3, r2
 800195e:	0019      	movs	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	2204      	movs	r2, #4
 8001972:	4013      	ands	r3, r2
 8001974:	d00b      	beq.n	800198e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4a3b      	ldr	r2, [pc, #236]	; (8001a6c <UART_AdvFeatureConfig+0x14c>)
 800197e:	4013      	ands	r3, r2
 8001980:	0019      	movs	r1, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	2208      	movs	r2, #8
 8001994:	4013      	ands	r3, r2
 8001996:	d00b      	beq.n	80019b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4a34      	ldr	r2, [pc, #208]	; (8001a70 <UART_AdvFeatureConfig+0x150>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	0019      	movs	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	2210      	movs	r2, #16
 80019b6:	4013      	ands	r3, r2
 80019b8:	d00b      	beq.n	80019d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a2c      	ldr	r2, [pc, #176]	; (8001a74 <UART_AdvFeatureConfig+0x154>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	0019      	movs	r1, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	2220      	movs	r2, #32
 80019d8:	4013      	ands	r3, r2
 80019da:	d00b      	beq.n	80019f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	4a25      	ldr	r2, [pc, #148]	; (8001a78 <UART_AdvFeatureConfig+0x158>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	2240      	movs	r2, #64	; 0x40
 80019fa:	4013      	ands	r3, r2
 80019fc:	d01d      	beq.n	8001a3a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <UART_AdvFeatureConfig+0x15c>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	035b      	lsls	r3, r3, #13
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d10b      	bne.n	8001a3a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <UART_AdvFeatureConfig+0x160>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	4013      	ands	r3, r2
 8001a42:	d00b      	beq.n	8001a5c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <UART_AdvFeatureConfig+0x164>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	0019      	movs	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]
  }
}
 8001a5c:	46c0      	nop			; (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b002      	add	sp, #8
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	fffdffff 	.word	0xfffdffff
 8001a68:	fffeffff 	.word	0xfffeffff
 8001a6c:	fffbffff 	.word	0xfffbffff
 8001a70:	ffff7fff 	.word	0xffff7fff
 8001a74:	ffffefff 	.word	0xffffefff
 8001a78:	ffffdfff 	.word	0xffffdfff
 8001a7c:	ffefffff 	.word	0xffefffff
 8001a80:	ff9fffff 	.word	0xff9fffff
 8001a84:	fff7ffff 	.word	0xfff7ffff

08001a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	2100      	movs	r1, #0
 8001a96:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001a98:	f7fe fdfc 	bl	8000694 <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d10d      	bne.n	8001aca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	0399      	lsls	r1, r3, #14
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <UART_CheckIdleState+0x90>)
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	0013      	movs	r3, r2
 8001abc:	2200      	movs	r2, #0
 8001abe:	f000 f82d 	bl	8001b1c <UART_WaitOnFlagUntilTimeout>
 8001ac2:	1e03      	subs	r3, r0, #0
 8001ac4:	d001      	beq.n	8001aca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e022      	b.n	8001b10 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d10d      	bne.n	8001af4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	03d9      	lsls	r1, r3, #15
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <UART_CheckIdleState+0x90>)
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	0013      	movs	r3, r2
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f000 f818 	bl	8001b1c <UART_WaitOnFlagUntilTimeout>
 8001aec:	1e03      	subs	r3, r0, #0
 8001aee:	d001      	beq.n	8001af4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e00d      	b.n	8001b10 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2220      	movs	r2, #32
 8001af8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2220      	movs	r2, #32
 8001afe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2274      	movs	r2, #116	; 0x74
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b004      	add	sp, #16
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	01ffffff 	.word	0x01ffffff

08001b1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	1dfb      	adds	r3, r7, #7
 8001b2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b2c:	e05e      	b.n	8001bec <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	3301      	adds	r3, #1
 8001b32:	d05b      	beq.n	8001bec <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b34:	f7fe fdae 	bl	8000694 <HAL_GetTick>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d302      	bcc.n	8001b4a <UART_WaitOnFlagUntilTimeout+0x2e>
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d11b      	bne.n	8001b82 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	492f      	ldr	r1, [pc, #188]	; (8001c14 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8001b56:	400a      	ands	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2101      	movs	r1, #1
 8001b66:	438a      	bics	r2, r1
 8001b68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2220      	movs	r2, #32
 8001b74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2274      	movs	r2, #116	; 0x74
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e044      	b.n	8001c0c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2204      	movs	r2, #4
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d02e      	beq.n	8001bec <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69da      	ldr	r2, [r3, #28]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	401a      	ands	r2, r3
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d124      	bne.n	8001bec <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4917      	ldr	r1, [pc, #92]	; (8001c14 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8001bb8:	400a      	ands	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	438a      	bics	r2, r1
 8001bca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	2120      	movs	r1, #32
 8001bde:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2274      	movs	r2, #116	; 0x74
 8001be4:	2100      	movs	r1, #0
 8001be6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e00f      	b.n	8001c0c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	425a      	negs	r2, r3
 8001bfc:	4153      	adcs	r3, r2
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	001a      	movs	r2, r3
 8001c02:	1dfb      	adds	r3, r7, #7
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d091      	beq.n	8001b2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b004      	add	sp, #16
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	fffffe5f 	.word	0xfffffe5f

08001c18 <__NVIC_EnableIRQ>:
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	0002      	movs	r2, r0
 8001c20:	1dfb      	adds	r3, r7, #7
 8001c22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b7f      	cmp	r3, #127	; 0x7f
 8001c2a:	d809      	bhi.n	8001c40 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2c:	1dfb      	adds	r3, r7, #7
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	001a      	movs	r2, r3
 8001c32:	231f      	movs	r3, #31
 8001c34:	401a      	ands	r2, r3
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_EnableIRQ+0x30>)
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4091      	lsls	r1, r2
 8001c3c:	000a      	movs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b002      	add	sp, #8
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	0002      	movs	r2, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	1dfb      	adds	r3, r7, #7
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c60:	d828      	bhi.n	8001cb4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c62:	4a2f      	ldr	r2, [pc, #188]	; (8001d20 <__NVIC_SetPriority+0xd4>)
 8001c64:	1dfb      	adds	r3, r7, #7
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b25b      	sxtb	r3, r3
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	33c0      	adds	r3, #192	; 0xc0
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	589b      	ldr	r3, [r3, r2]
 8001c72:	1dfa      	adds	r2, r7, #7
 8001c74:	7812      	ldrb	r2, [r2, #0]
 8001c76:	0011      	movs	r1, r2
 8001c78:	2203      	movs	r2, #3
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	00d2      	lsls	r2, r2, #3
 8001c7e:	21ff      	movs	r1, #255	; 0xff
 8001c80:	4091      	lsls	r1, r2
 8001c82:	000a      	movs	r2, r1
 8001c84:	43d2      	mvns	r2, r2
 8001c86:	401a      	ands	r2, r3
 8001c88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	22ff      	movs	r2, #255	; 0xff
 8001c90:	401a      	ands	r2, r3
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	0018      	movs	r0, r3
 8001c98:	2303      	movs	r3, #3
 8001c9a:	4003      	ands	r3, r0
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ca0:	481f      	ldr	r0, [pc, #124]	; (8001d20 <__NVIC_SetPriority+0xd4>)
 8001ca2:	1dfb      	adds	r3, r7, #7
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	430a      	orrs	r2, r1
 8001cac:	33c0      	adds	r3, #192	; 0xc0
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	501a      	str	r2, [r3, r0]
}
 8001cb2:	e031      	b.n	8001d18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <__NVIC_SetPriority+0xd8>)
 8001cb6:	1dfb      	adds	r3, r7, #7
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	0019      	movs	r1, r3
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	3b08      	subs	r3, #8
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3306      	adds	r3, #6
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	18d3      	adds	r3, r2, r3
 8001cca:	3304      	adds	r3, #4
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	1dfa      	adds	r2, r7, #7
 8001cd0:	7812      	ldrb	r2, [r2, #0]
 8001cd2:	0011      	movs	r1, r2
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	00d2      	lsls	r2, r2, #3
 8001cda:	21ff      	movs	r1, #255	; 0xff
 8001cdc:	4091      	lsls	r1, r2
 8001cde:	000a      	movs	r2, r1
 8001ce0:	43d2      	mvns	r2, r2
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	22ff      	movs	r2, #255	; 0xff
 8001cec:	401a      	ands	r2, r3
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	4003      	ands	r3, r0
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cfc:	4809      	ldr	r0, [pc, #36]	; (8001d24 <__NVIC_SetPriority+0xd8>)
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	001c      	movs	r4, r3
 8001d04:	230f      	movs	r3, #15
 8001d06:	4023      	ands	r3, r4
 8001d08:	3b08      	subs	r3, #8
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	3306      	adds	r3, #6
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	18c3      	adds	r3, r0, r3
 8001d14:	3304      	adds	r3, #4
 8001d16:	601a      	str	r2, [r3, #0]
}
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b003      	add	sp, #12
 8001d1e:	bd90      	pop	{r4, r7, pc}
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <timer6_init>:
#include "timer_driver.h"



void timer6_init(void)
{	
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
	// Enable TIM6 Clock
	__HAL_RCC_TIM6_CLK_ENABLE();
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <timer6_init+0x4c>)
 8001d30:	69da      	ldr	r2, [r3, #28]
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <timer6_init+0x4c>)
 8001d34:	2110      	movs	r1, #16
 8001d36:	430a      	orrs	r2, r1
 8001d38:	61da      	str	r2, [r3, #28]
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <timer6_init+0x4c>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	2210      	movs	r2, #16
 8001d40:	4013      	ands	r3, r2
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
	
	// Timer clock = 48 mhz / 48000 = 1000 Hz (1 ms period)
	TIM6->PSC = 47999;
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <timer6_init+0x50>)
 8001d48:	4a0c      	ldr	r2, [pc, #48]	; (8001d7c <timer6_init+0x54>)
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
	
	// Reload in every 100 ms
	TIM6->ARR = 99;
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <timer6_init+0x50>)
 8001d4e:	2263      	movs	r2, #99	; 0x63
 8001d50:	62da      	str	r2, [r3, #44]	; 0x2c
	
	// Enable Timer Update Interrupt
	TIM6->DIER |= TIM_DIER_UIE;
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <timer6_init+0x50>)
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <timer6_init+0x50>)
 8001d58:	2101      	movs	r1, #1
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	60da      	str	r2, [r3, #12]

	// Enable TIM6 Interrupt on NVIC
	NVIC_EnableIRQ(TIM6_IRQn);
 8001d5e:	2011      	movs	r0, #17
 8001d60:	f7ff ff5a 	bl	8001c18 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM6_IRQn,2);
 8001d64:	2102      	movs	r1, #2
 8001d66:	2011      	movs	r0, #17
 8001d68:	f7ff ff70 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40001000 	.word	0x40001000
 8001d7c:	0000bb7f 	.word	0x0000bb7f

08001d80 <TIM6_IRQHandler>:
	TIM6->CR1 &= ~(TIM_CR1_CEN);	
}

// Timer6 Interrupt Request Handler
void TIM6_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	TIM6->SR &=~(TIM_SR_UIF);
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <TIM6_IRQHandler+0x28>)
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <TIM6_IRQHandler+0x28>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	438a      	bics	r2, r1
 8001d8e:	611a      	str	r2, [r3, #16]
	
	GPIOA->ODR ^= GPIO_PIN_5;
 8001d90:	2390      	movs	r3, #144	; 0x90
 8001d92:	05db      	lsls	r3, r3, #23
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	2390      	movs	r3, #144	; 0x90
 8001d98:	05db      	lsls	r3, r3, #23
 8001d9a:	2120      	movs	r1, #32
 8001d9c:	404a      	eors	r2, r1
 8001d9e:	615a      	str	r2, [r3, #20]
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	40001000 	.word	0x40001000

08001dac <USART2_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA 
  *         used for USART data transmission     
  */
void USART2_IRQHandler(void)
{  
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
  uint32_t isrflags = USART2->ISR;
 8001db2:	4b33      	ldr	r3, [pc, #204]	; (8001e80 <USART2_IRQHandler+0xd4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	607b      	str	r3, [r7, #4]
  uint32_t control_reg1 = USART2->CR1;
 8001db8:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <USART2_IRQHandler+0xd4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	603b      	str	r3, [r7, #0]

  /* UART in mode Receiver */
  if(((isrflags & USART_ISR_RXNE) != RESET) && ((control_reg1 & USART_CR1_RXNEIE) != RESET))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d024      	beq.n	8001e10 <USART2_IRQHandler+0x64>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d020      	beq.n	8001e10 <USART2_IRQHandler+0x64>
  {
	  /* Read one byte from the receive data register */

	  UART_BufferRX.buffer[UART_BufferRX.head_pointer] = USART2->RDR;
 8001dce:	4b2c      	ldr	r3, [pc, #176]	; (8001e80 <USART2_IRQHandler+0xd4>)
 8001dd0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001dd2:	b299      	uxth	r1, r3
 8001dd4:	4a2b      	ldr	r2, [pc, #172]	; (8001e84 <USART2_IRQHandler+0xd8>)
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	58d2      	ldr	r2, [r2, r3]
 8001ddc:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <USART2_IRQHandler+0xd8>)
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	50d1      	str	r1, [r2, r3]

	  UART_BufferRX.head_pointer = UART_BufferRX.head_pointer + 1;
 8001de2:	4a28      	ldr	r2, [pc, #160]	; (8001e84 <USART2_IRQHandler+0xd8>)
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	58d3      	ldr	r3, [r2, r3]
 8001dea:	1c59      	adds	r1, r3, #1
 8001dec:	4a25      	ldr	r2, [pc, #148]	; (8001e84 <USART2_IRQHandler+0xd8>)
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	50d1      	str	r1, [r2, r3]

	  if(UART_BufferRX.head_pointer == BUFFER_SIZE)
 8001df4:	4a23      	ldr	r2, [pc, #140]	; (8001e84 <USART2_IRQHandler+0xd8>)
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	58d2      	ldr	r2, [r2, r3]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d137      	bne.n	8001e74 <USART2_IRQHandler+0xc8>
	  {
		  UART_BufferRX.head_pointer = 0;
 8001e04:	4a1f      	ldr	r2, [pc, #124]	; (8001e84 <USART2_IRQHandler+0xd8>)
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	50d1      	str	r1, [r2, r3]
	  }

	  return;
 8001e0e:	e031      	b.n	8001e74 <USART2_IRQHandler+0xc8>
  }


  /* UART in mode Transmitter */
  if(((isrflags & USART_ISR_TXE) != RESET) && ((control_reg1 & USART_CR1_TXEIE) != RESET))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2280      	movs	r2, #128	; 0x80
 8001e14:	4013      	ands	r3, r2
 8001e16:	d030      	beq.n	8001e7a <USART2_IRQHandler+0xce>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2280      	movs	r2, #128	; 0x80
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d02c      	beq.n	8001e7a <USART2_IRQHandler+0xce>
  {    
		if(UART_BufferTX.head_pointer != UART_BufferTX.tail_pointer)
 8001e20:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <USART2_IRQHandler+0xdc>)
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	58d2      	ldr	r2, [r2, r3]
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <USART2_IRQHandler+0xdc>)
 8001e2a:	4918      	ldr	r1, [pc, #96]	; (8001e8c <USART2_IRQHandler+0xe0>)
 8001e2c:	585b      	ldr	r3, [r3, r1]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d018      	beq.n	8001e64 <USART2_IRQHandler+0xb8>
		{
			// Send one byte from Transmit buffer
			USART2->TDR = UART_BufferTX.buffer[UART_BufferTX.tail_pointer++];
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <USART2_IRQHandler+0xdc>)
 8001e34:	4a15      	ldr	r2, [pc, #84]	; (8001e8c <USART2_IRQHandler+0xe0>)
 8001e36:	589b      	ldr	r3, [r3, r2]
 8001e38:	1c59      	adds	r1, r3, #1
 8001e3a:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <USART2_IRQHandler+0xdc>)
 8001e3c:	4813      	ldr	r0, [pc, #76]	; (8001e8c <USART2_IRQHandler+0xe0>)
 8001e3e:	5011      	str	r1, [r2, r0]
 8001e40:	4a11      	ldr	r2, [pc, #68]	; (8001e88 <USART2_IRQHandler+0xdc>)
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	589a      	ldr	r2, [r3, r2]
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <USART2_IRQHandler+0xd4>)
 8001e48:	b292      	uxth	r2, r2
 8001e4a:	851a      	strh	r2, [r3, #40]	; 0x28
			
			if(UART_BufferTX.tail_pointer == BUFFER_SIZE)
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <USART2_IRQHandler+0xdc>)
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <USART2_IRQHandler+0xe0>)
 8001e50:	589a      	ldr	r2, [r3, r2]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d10e      	bne.n	8001e78 <USART2_IRQHandler+0xcc>
			{
				UART_BufferTX.tail_pointer = 0;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <USART2_IRQHandler+0xdc>)
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <USART2_IRQHandler+0xe0>)
 8001e5e:	2100      	movs	r1, #0
 8001e60:	5099      	str	r1, [r3, r2]
		{
			/* Disable the UART Transmit Data Register Empty Interrupt */
			CLEAR_BIT(USART2->CR1, USART_CR1_TXEIE);
		}			
		
    return;
 8001e62:	e009      	b.n	8001e78 <USART2_IRQHandler+0xcc>
			CLEAR_BIT(USART2->CR1, USART_CR1_TXEIE);
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <USART2_IRQHandler+0xd4>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <USART2_IRQHandler+0xd4>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	438a      	bics	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
    return;
 8001e70:	46c0      	nop			; (mov r8, r8)
 8001e72:	e001      	b.n	8001e78 <USART2_IRQHandler+0xcc>
	  return;
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	e000      	b.n	8001e7a <USART2_IRQHandler+0xce>
    return;
 8001e78:	46c0      	nop			; (mov r8, r8)
  }
}
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b002      	add	sp, #8
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40004400 	.word	0x40004400
 8001e84:	20000134 	.word	0x20000134
 8001e88:	2000053c 	.word	0x2000053c
 8001e8c:	00000404 	.word	0x00000404

08001e90 <__libc_init_array>:
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	2600      	movs	r6, #0
 8001e94:	4d0c      	ldr	r5, [pc, #48]	; (8001ec8 <__libc_init_array+0x38>)
 8001e96:	4c0d      	ldr	r4, [pc, #52]	; (8001ecc <__libc_init_array+0x3c>)
 8001e98:	1b64      	subs	r4, r4, r5
 8001e9a:	10a4      	asrs	r4, r4, #2
 8001e9c:	42a6      	cmp	r6, r4
 8001e9e:	d109      	bne.n	8001eb4 <__libc_init_array+0x24>
 8001ea0:	2600      	movs	r6, #0
 8001ea2:	f000 f821 	bl	8001ee8 <_init>
 8001ea6:	4d0a      	ldr	r5, [pc, #40]	; (8001ed0 <__libc_init_array+0x40>)
 8001ea8:	4c0a      	ldr	r4, [pc, #40]	; (8001ed4 <__libc_init_array+0x44>)
 8001eaa:	1b64      	subs	r4, r4, r5
 8001eac:	10a4      	asrs	r4, r4, #2
 8001eae:	42a6      	cmp	r6, r4
 8001eb0:	d105      	bne.n	8001ebe <__libc_init_array+0x2e>
 8001eb2:	bd70      	pop	{r4, r5, r6, pc}
 8001eb4:	00b3      	lsls	r3, r6, #2
 8001eb6:	58eb      	ldr	r3, [r5, r3]
 8001eb8:	4798      	blx	r3
 8001eba:	3601      	adds	r6, #1
 8001ebc:	e7ee      	b.n	8001e9c <__libc_init_array+0xc>
 8001ebe:	00b3      	lsls	r3, r6, #2
 8001ec0:	58eb      	ldr	r3, [r5, r3]
 8001ec2:	4798      	blx	r3
 8001ec4:	3601      	adds	r6, #1
 8001ec6:	e7f2      	b.n	8001eae <__libc_init_array+0x1e>
 8001ec8:	08001f38 	.word	0x08001f38
 8001ecc:	08001f38 	.word	0x08001f38
 8001ed0:	08001f38 	.word	0x08001f38
 8001ed4:	08001f3c 	.word	0x08001f3c

08001ed8 <memset>:
 8001ed8:	0003      	movs	r3, r0
 8001eda:	1812      	adds	r2, r2, r0
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d100      	bne.n	8001ee2 <memset+0xa>
 8001ee0:	4770      	bx	lr
 8001ee2:	7019      	strb	r1, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	e7f9      	b.n	8001edc <memset+0x4>

08001ee8 <_init>:
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eee:	bc08      	pop	{r3}
 8001ef0:	469e      	mov	lr, r3
 8001ef2:	4770      	bx	lr

08001ef4 <_fini>:
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001efa:	bc08      	pop	{r3}
 8001efc:	469e      	mov	lr, r3
 8001efe:	4770      	bx	lr
