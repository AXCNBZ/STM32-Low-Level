
General Purpose Timer - PWM Output.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000221c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002314  08002314  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002314  08002314  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002314  08002314  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002314  08002314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002318  08002318  00012318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800231c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000938  2000000c  08002328  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  08002328  00020944  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066c3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000173a  00000000  00000000  000266f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a0  00000000  00000000  00027e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f8  00000000  00000000  000284d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f80f  00000000  00000000  00028ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ec8  00000000  00000000  000382df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005c5b1  00000000  00000000  0003f1a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009b758  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001588  00000000  00000000  0009b7d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022c4 	.word	0x080022c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080022c4 	.word	0x080022c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa00 	bl	8000628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f80d 	bl	8000246 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f89e 	bl	800036c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000230:	f000 f86c 	bl	800030c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	UART_Init();
 8000234:	f001 ff16 	bl	8002064 <UART_Init>
	pwm_init();
 8000238:	f001 fe44 	bl	8001ec4 <pwm_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		pwm_set_duty_cycle(1,1);
 800023c:	2101      	movs	r1, #1
 800023e:	2001      	movs	r0, #1
 8000240:	f001 fee0 	bl	8002004 <pwm_set_duty_cycle>
 8000244:	e7fa      	b.n	800023c <main+0x1c>

08000246 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000246:	b590      	push	{r4, r7, lr}
 8000248:	b097      	sub	sp, #92	; 0x5c
 800024a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024c:	2428      	movs	r4, #40	; 0x28
 800024e:	193b      	adds	r3, r7, r4
 8000250:	0018      	movs	r0, r3
 8000252:	2330      	movs	r3, #48	; 0x30
 8000254:	001a      	movs	r2, r3
 8000256:	2100      	movs	r1, #0
 8000258:	f002 f82c 	bl	80022b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	2318      	movs	r3, #24
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	0018      	movs	r0, r3
 8000262:	2310      	movs	r3, #16
 8000264:	001a      	movs	r2, r3
 8000266:	2100      	movs	r1, #0
 8000268:	f002 f824 	bl	80022b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	0018      	movs	r0, r3
 8000270:	2314      	movs	r3, #20
 8000272:	001a      	movs	r2, r3
 8000274:	2100      	movs	r1, #0
 8000276:	f002 f81d 	bl	80022b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027a:	0021      	movs	r1, r4
 800027c:	187b      	adds	r3, r7, r1
 800027e:	2202      	movs	r2, #2
 8000280:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2201      	movs	r2, #1
 8000286:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2210      	movs	r2, #16
 800028c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2202      	movs	r2, #2
 8000292:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	0212      	lsls	r2, r2, #8
 800029a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2280      	movs	r2, #128	; 0x80
 80002a0:	0352      	lsls	r2, r2, #13
 80002a2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2200      	movs	r2, #0
 80002a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fd59 	bl	8000d64 <HAL_RCC_OscConfig>
 80002b2:	1e03      	subs	r3, r0, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002b6:	f000 f8d9 	bl	800046c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	2118      	movs	r1, #24
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2207      	movs	r2, #7
 80002c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2202      	movs	r2, #2
 80002c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2101      	movs	r1, #1
 80002d8:	0018      	movs	r0, r3
 80002da:	f001 f861 	bl	80013a0 <HAL_RCC_ClockConfig>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002e2:	f000 f8c3 	bl	800046c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2201      	movs	r2, #1
 80002ea:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 f9a7 	bl	8001648 <HAL_RCCEx_PeriphCLKConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80002fe:	f000 f8b5 	bl	800046c <Error_Handler>
  }
}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	b017      	add	sp, #92	; 0x5c
 8000308:	bd90      	pop	{r4, r7, pc}
	...

0800030c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <MX_USART1_UART_Init+0x5c>)
 8000314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000316:	4b13      	ldr	r3, [pc, #76]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000318:	2296      	movs	r2, #150	; 0x96
 800031a:	0212      	lsls	r2, r2, #8
 800031c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_USART1_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <MX_USART1_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000344:	2200      	movs	r2, #0
 8000346:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_USART1_UART_Init+0x58>)
 800034a:	2200      	movs	r2, #0
 800034c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <MX_USART1_UART_Init+0x58>)
 8000350:	0018      	movs	r0, r3
 8000352:	f001 fa57 	bl	8001804 <HAL_UART_Init>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800035a:	f000 f887 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000028 	.word	0x20000028
 8000368:	40013800 	.word	0x40013800

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b089      	sub	sp, #36	; 0x24
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	240c      	movs	r4, #12
 8000374:	193b      	adds	r3, r7, r4
 8000376:	0018      	movs	r0, r3
 8000378:	2314      	movs	r3, #20
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f001 ff99 	bl	80022b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000382:	4b37      	ldr	r3, [pc, #220]	; (8000460 <MX_GPIO_Init+0xf4>)
 8000384:	695a      	ldr	r2, [r3, #20]
 8000386:	4b36      	ldr	r3, [pc, #216]	; (8000460 <MX_GPIO_Init+0xf4>)
 8000388:	2180      	movs	r1, #128	; 0x80
 800038a:	0309      	lsls	r1, r1, #12
 800038c:	430a      	orrs	r2, r1
 800038e:	615a      	str	r2, [r3, #20]
 8000390:	4b33      	ldr	r3, [pc, #204]	; (8000460 <MX_GPIO_Init+0xf4>)
 8000392:	695a      	ldr	r2, [r3, #20]
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	031b      	lsls	r3, r3, #12
 8000398:	4013      	ands	r3, r2
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039e:	4b30      	ldr	r3, [pc, #192]	; (8000460 <MX_GPIO_Init+0xf4>)
 80003a0:	695a      	ldr	r2, [r3, #20]
 80003a2:	4b2f      	ldr	r3, [pc, #188]	; (8000460 <MX_GPIO_Init+0xf4>)
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	03c9      	lsls	r1, r1, #15
 80003a8:	430a      	orrs	r2, r1
 80003aa:	615a      	str	r2, [r3, #20]
 80003ac:	4b2c      	ldr	r3, [pc, #176]	; (8000460 <MX_GPIO_Init+0xf4>)
 80003ae:	695a      	ldr	r2, [r3, #20]
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	03db      	lsls	r3, r3, #15
 80003b4:	4013      	ands	r3, r2
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ba:	4b29      	ldr	r3, [pc, #164]	; (8000460 <MX_GPIO_Init+0xf4>)
 80003bc:	695a      	ldr	r2, [r3, #20]
 80003be:	4b28      	ldr	r3, [pc, #160]	; (8000460 <MX_GPIO_Init+0xf4>)
 80003c0:	2180      	movs	r1, #128	; 0x80
 80003c2:	0289      	lsls	r1, r1, #10
 80003c4:	430a      	orrs	r2, r1
 80003c6:	615a      	str	r2, [r3, #20]
 80003c8:	4b25      	ldr	r3, [pc, #148]	; (8000460 <MX_GPIO_Init+0xf4>)
 80003ca:	695a      	ldr	r2, [r3, #20]
 80003cc:	2380      	movs	r3, #128	; 0x80
 80003ce:	029b      	lsls	r3, r3, #10
 80003d0:	4013      	ands	r3, r2
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003d6:	2390      	movs	r3, #144	; 0x90
 80003d8:	05db      	lsls	r3, r3, #23
 80003da:	2200      	movs	r2, #0
 80003dc:	2120      	movs	r1, #32
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 fca2 	bl	8000d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	2280      	movs	r2, #128	; 0x80
 80003e8:	0192      	lsls	r2, r2, #6
 80003ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	4a1d      	ldr	r2, [pc, #116]	; (8000464 <MX_GPIO_Init+0xf8>)
 80003f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	193b      	adds	r3, r7, r4
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	4a1b      	ldr	r2, [pc, #108]	; (8000468 <MX_GPIO_Init+0xfc>)
 80003fc:	0019      	movs	r1, r3
 80003fe:	0010      	movs	r0, r2
 8000400:	f000 fa54 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000404:	193b      	adds	r3, r7, r4
 8000406:	220c      	movs	r2, #12
 8000408:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800040a:	193b      	adds	r3, r7, r4
 800040c:	2202      	movs	r2, #2
 800040e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000410:	193b      	adds	r3, r7, r4
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000416:	193b      	adds	r3, r7, r4
 8000418:	2203      	movs	r2, #3
 800041a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800041c:	193b      	adds	r3, r7, r4
 800041e:	2201      	movs	r2, #1
 8000420:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	193a      	adds	r2, r7, r4
 8000424:	2390      	movs	r3, #144	; 0x90
 8000426:	05db      	lsls	r3, r3, #23
 8000428:	0011      	movs	r1, r2
 800042a:	0018      	movs	r0, r3
 800042c:	f000 fa3e 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000430:	0021      	movs	r1, r4
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2220      	movs	r2, #32
 8000436:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2201      	movs	r2, #1
 800043c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	187b      	adds	r3, r7, r1
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800044a:	187a      	adds	r2, r7, r1
 800044c:	2390      	movs	r3, #144	; 0x90
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	0011      	movs	r1, r2
 8000452:	0018      	movs	r0, r3
 8000454:	f000 fa2a 	bl	80008ac <HAL_GPIO_Init>

}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	b009      	add	sp, #36	; 0x24
 800045e:	bd90      	pop	{r4, r7, pc}
 8000460:	40021000 	.word	0x40021000
 8000464:	10210000 	.word	0x10210000
 8000468:	48000800 	.word	0x48000800

0800046c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000472:	e7fe      	b.n	8000472 <Error_Handler+0x6>

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_MspInit+0x44>)
 800047c:	699a      	ldr	r2, [r3, #24]
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <HAL_MspInit+0x44>)
 8000480:	2101      	movs	r1, #1
 8000482:	430a      	orrs	r2, r1
 8000484:	619a      	str	r2, [r3, #24]
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_MspInit+0x44>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	2201      	movs	r2, #1
 800048c:	4013      	ands	r3, r2
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <HAL_MspInit+0x44>)
 8000494:	69da      	ldr	r2, [r3, #28]
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <HAL_MspInit+0x44>)
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	0549      	lsls	r1, r1, #21
 800049c:	430a      	orrs	r2, r1
 800049e:	61da      	str	r2, [r3, #28]
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <HAL_MspInit+0x44>)
 80004a2:	69da      	ldr	r2, [r3, #28]
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	055b      	lsls	r3, r3, #21
 80004a8:	4013      	ands	r3, r2
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000

080004bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08a      	sub	sp, #40	; 0x28
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	2314      	movs	r3, #20
 80004c6:	18fb      	adds	r3, r7, r3
 80004c8:	0018      	movs	r0, r3
 80004ca:	2314      	movs	r3, #20
 80004cc:	001a      	movs	r2, r3
 80004ce:	2100      	movs	r1, #0
 80004d0:	f001 fef0 	bl	80022b4 <memset>
  if(huart->Instance==USART1)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a1d      	ldr	r2, [pc, #116]	; (8000550 <HAL_UART_MspInit+0x94>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d133      	bne.n	8000546 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004de:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <HAL_UART_MspInit+0x98>)
 80004e0:	699a      	ldr	r2, [r3, #24]
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <HAL_UART_MspInit+0x98>)
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	01c9      	lsls	r1, r1, #7
 80004e8:	430a      	orrs	r2, r1
 80004ea:	619a      	str	r2, [r3, #24]
 80004ec:	4b19      	ldr	r3, [pc, #100]	; (8000554 <HAL_UART_MspInit+0x98>)
 80004ee:	699a      	ldr	r2, [r3, #24]
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	01db      	lsls	r3, r3, #7
 80004f4:	4013      	ands	r3, r2
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b16      	ldr	r3, [pc, #88]	; (8000554 <HAL_UART_MspInit+0x98>)
 80004fc:	695a      	ldr	r2, [r3, #20]
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <HAL_UART_MspInit+0x98>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0289      	lsls	r1, r1, #10
 8000504:	430a      	orrs	r2, r1
 8000506:	615a      	str	r2, [r3, #20]
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_UART_MspInit+0x98>)
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	029b      	lsls	r3, r3, #10
 8000510:	4013      	ands	r3, r2
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000516:	2114      	movs	r1, #20
 8000518:	187b      	adds	r3, r7, r1
 800051a:	22c0      	movs	r2, #192	; 0xc0
 800051c:	00d2      	lsls	r2, r2, #3
 800051e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2202      	movs	r2, #2
 8000524:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2203      	movs	r2, #3
 8000530:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2201      	movs	r2, #1
 8000536:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	187a      	adds	r2, r7, r1
 800053a:	2390      	movs	r3, #144	; 0x90
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	0011      	movs	r1, r2
 8000540:	0018      	movs	r0, r3
 8000542:	f000 f9b3 	bl	80008ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b00a      	add	sp, #40	; 0x28
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	40013800 	.word	0x40013800
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a0a      	ldr	r2, [pc, #40]	; (8000590 <HAL_UART_MspDeInit+0x38>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d10d      	bne.n	8000586 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <HAL_UART_MspDeInit+0x3c>)
 800056c:	699a      	ldr	r2, [r3, #24]
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <HAL_UART_MspDeInit+0x3c>)
 8000570:	4909      	ldr	r1, [pc, #36]	; (8000598 <HAL_UART_MspDeInit+0x40>)
 8000572:	400a      	ands	r2, r1
 8000574:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000576:	23c0      	movs	r3, #192	; 0xc0
 8000578:	00da      	lsls	r2, r3, #3
 800057a:	2390      	movs	r3, #144	; 0x90
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	0011      	movs	r1, r2
 8000580:	0018      	movs	r0, r3
 8000582:	f000 fb03 	bl	8000b8c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b002      	add	sp, #8
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	40013800 	.word	0x40013800
 8000594:	40021000 	.word	0x40021000
 8000598:	ffffbfff 	.word	0xffffbfff

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <NMI_Handler+0x4>

080005a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <HardFault_Handler+0x4>

080005a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c0:	f000 f87a 	bl	80006b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480d      	ldr	r0, [pc, #52]	; (8000610 <LoopForever+0x6>)
  ldr r1, =_edata
 80005da:	490e      	ldr	r1, [pc, #56]	; (8000614 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005dc:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <LoopForever+0xe>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0b      	ldr	r2, [pc, #44]	; (800061c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f0:	4c0b      	ldr	r4, [pc, #44]	; (8000620 <LoopForever+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005fe:	f7ff ffe4 	bl	80005ca <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000602:	f001 fe33 	bl	800226c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000606:	f7ff fe0b 	bl	8000220 <main>

0800060a <LoopForever>:

LoopForever:
    b LoopForever
 800060a:	e7fe      	b.n	800060a <LoopForever>
  ldr   r0, =_estack
 800060c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000614:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000618:	0800231c 	.word	0x0800231c
  ldr r2, =_sbss
 800061c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000620:	20000944 	.word	0x20000944

08000624 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <ADC1_IRQHandler>
	...

08000628 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <HAL_Init+0x24>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_Init+0x24>)
 8000632:	2110      	movs	r1, #16
 8000634:	430a      	orrs	r2, r1
 8000636:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000638:	2000      	movs	r0, #0
 800063a:	f000 f809 	bl	8000650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800063e:	f7ff ff19 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	0018      	movs	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	40022000 	.word	0x40022000

08000650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <HAL_InitTick+0x5c>)
 800065a:	681c      	ldr	r4, [r3, #0]
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <HAL_InitTick+0x60>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	0019      	movs	r1, r3
 8000662:	23fa      	movs	r3, #250	; 0xfa
 8000664:	0098      	lsls	r0, r3, #2
 8000666:	f7ff fd4f 	bl	8000108 <__udivsi3>
 800066a:	0003      	movs	r3, r0
 800066c:	0019      	movs	r1, r3
 800066e:	0020      	movs	r0, r4
 8000670:	f7ff fd4a 	bl	8000108 <__udivsi3>
 8000674:	0003      	movs	r3, r0
 8000676:	0018      	movs	r0, r3
 8000678:	f000 f90b 	bl	8000892 <HAL_SYSTICK_Config>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d001      	beq.n	8000684 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000680:	2301      	movs	r3, #1
 8000682:	e00f      	b.n	80006a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b03      	cmp	r3, #3
 8000688:	d80b      	bhi.n	80006a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	2301      	movs	r3, #1
 800068e:	425b      	negs	r3, r3
 8000690:	2200      	movs	r2, #0
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f8d8 	bl	8000848 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_InitTick+0x64>)
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800069e:	2300      	movs	r3, #0
 80006a0:	e000      	b.n	80006a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b003      	add	sp, #12
 80006aa:	bd90      	pop	{r4, r7, pc}
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000004 	.word	0x20000004

080006b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_IncTick+0x1c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	001a      	movs	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_IncTick+0x20>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	18d2      	adds	r2, r2, r3
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <HAL_IncTick+0x20>)
 80006ca:	601a      	str	r2, [r3, #0]
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	20000008 	.word	0x20000008
 80006d8:	200000ac 	.word	0x200000ac

080006dc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;
 80006e0:	4b02      	ldr	r3, [pc, #8]	; (80006ec <HAL_GetTick+0x10>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	0018      	movs	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	200000ac 	.word	0x200000ac

080006f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	0002      	movs	r2, r0
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b7f      	cmp	r3, #127	; 0x7f
 8000702:	d809      	bhi.n	8000718 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	001a      	movs	r2, r3
 800070a:	231f      	movs	r3, #31
 800070c:	401a      	ands	r2, r3
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <__NVIC_EnableIRQ+0x30>)
 8000710:	2101      	movs	r1, #1
 8000712:	4091      	lsls	r1, r2
 8000714:	000a      	movs	r2, r1
 8000716:	601a      	str	r2, [r3, #0]
  }
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b002      	add	sp, #8
 800071e:	bd80      	pop	{r7, pc}
 8000720:	e000e100 	.word	0xe000e100

08000724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	0002      	movs	r2, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b7f      	cmp	r3, #127	; 0x7f
 8000738:	d828      	bhi.n	800078c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073a:	4a2f      	ldr	r2, [pc, #188]	; (80007f8 <__NVIC_SetPriority+0xd4>)
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b25b      	sxtb	r3, r3
 8000742:	089b      	lsrs	r3, r3, #2
 8000744:	33c0      	adds	r3, #192	; 0xc0
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	589b      	ldr	r3, [r3, r2]
 800074a:	1dfa      	adds	r2, r7, #7
 800074c:	7812      	ldrb	r2, [r2, #0]
 800074e:	0011      	movs	r1, r2
 8000750:	2203      	movs	r2, #3
 8000752:	400a      	ands	r2, r1
 8000754:	00d2      	lsls	r2, r2, #3
 8000756:	21ff      	movs	r1, #255	; 0xff
 8000758:	4091      	lsls	r1, r2
 800075a:	000a      	movs	r2, r1
 800075c:	43d2      	mvns	r2, r2
 800075e:	401a      	ands	r2, r3
 8000760:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	019b      	lsls	r3, r3, #6
 8000766:	22ff      	movs	r2, #255	; 0xff
 8000768:	401a      	ands	r2, r3
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	0018      	movs	r0, r3
 8000770:	2303      	movs	r3, #3
 8000772:	4003      	ands	r3, r0
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000778:	481f      	ldr	r0, [pc, #124]	; (80007f8 <__NVIC_SetPriority+0xd4>)
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b25b      	sxtb	r3, r3
 8000780:	089b      	lsrs	r3, r3, #2
 8000782:	430a      	orrs	r2, r1
 8000784:	33c0      	adds	r3, #192	; 0xc0
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800078a:	e031      	b.n	80007f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <__NVIC_SetPriority+0xd8>)
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	0019      	movs	r1, r3
 8000794:	230f      	movs	r3, #15
 8000796:	400b      	ands	r3, r1
 8000798:	3b08      	subs	r3, #8
 800079a:	089b      	lsrs	r3, r3, #2
 800079c:	3306      	adds	r3, #6
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	18d3      	adds	r3, r2, r3
 80007a2:	3304      	adds	r3, #4
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	1dfa      	adds	r2, r7, #7
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	0011      	movs	r1, r2
 80007ac:	2203      	movs	r2, #3
 80007ae:	400a      	ands	r2, r1
 80007b0:	00d2      	lsls	r2, r2, #3
 80007b2:	21ff      	movs	r1, #255	; 0xff
 80007b4:	4091      	lsls	r1, r2
 80007b6:	000a      	movs	r2, r1
 80007b8:	43d2      	mvns	r2, r2
 80007ba:	401a      	ands	r2, r3
 80007bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	019b      	lsls	r3, r3, #6
 80007c2:	22ff      	movs	r2, #255	; 0xff
 80007c4:	401a      	ands	r2, r3
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	0018      	movs	r0, r3
 80007cc:	2303      	movs	r3, #3
 80007ce:	4003      	ands	r3, r0
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d4:	4809      	ldr	r0, [pc, #36]	; (80007fc <__NVIC_SetPriority+0xd8>)
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	001c      	movs	r4, r3
 80007dc:	230f      	movs	r3, #15
 80007de:	4023      	ands	r3, r4
 80007e0:	3b08      	subs	r3, #8
 80007e2:	089b      	lsrs	r3, r3, #2
 80007e4:	430a      	orrs	r2, r1
 80007e6:	3306      	adds	r3, #6
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	18c3      	adds	r3, r0, r3
 80007ec:	3304      	adds	r3, #4
 80007ee:	601a      	str	r2, [r3, #0]
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b003      	add	sp, #12
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <SysTick_Config+0x40>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d901      	bls.n	8000816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000812:	2301      	movs	r3, #1
 8000814:	e010      	b.n	8000838 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <SysTick_Config+0x44>)
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	3a01      	subs	r2, #1
 800081c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081e:	2301      	movs	r3, #1
 8000820:	425b      	negs	r3, r3
 8000822:	2103      	movs	r1, #3
 8000824:	0018      	movs	r0, r3
 8000826:	f7ff ff7d 	bl	8000724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <SysTick_Config+0x44>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <SysTick_Config+0x44>)
 8000832:	2207      	movs	r2, #7
 8000834:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000836:	2300      	movs	r3, #0
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}
 8000840:	00ffffff 	.word	0x00ffffff
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	210f      	movs	r1, #15
 8000854:	187b      	adds	r3, r7, r1
 8000856:	1c02      	adds	r2, r0, #0
 8000858:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	187b      	adds	r3, r7, r1
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b25b      	sxtb	r3, r3
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff ff5d 	bl	8000724 <__NVIC_SetPriority>
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b004      	add	sp, #16
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	0002      	movs	r2, r0
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b25b      	sxtb	r3, r3
 8000884:	0018      	movs	r0, r3
 8000886:	f7ff ff33 	bl	80006f0 <__NVIC_EnableIRQ>
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff ffaf 	bl	8000800 <SysTick_Config>
 80008a2:	0003      	movs	r3, r0
}
 80008a4:	0018      	movs	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b002      	add	sp, #8
 80008aa:	bd80      	pop	{r7, pc}

080008ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ba:	e14f      	b.n	8000b5c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2101      	movs	r1, #1
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	4091      	lsls	r1, r2
 80008c6:	000a      	movs	r2, r1
 80008c8:	4013      	ands	r3, r2
 80008ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d100      	bne.n	80008d4 <HAL_GPIO_Init+0x28>
 80008d2:	e140      	b.n	8000b56 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d00b      	beq.n	80008f4 <HAL_GPIO_Init+0x48>
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d007      	beq.n	80008f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e8:	2b11      	cmp	r3, #17
 80008ea:	d003      	beq.n	80008f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b12      	cmp	r3, #18
 80008f2:	d130      	bne.n	8000956 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	2203      	movs	r2, #3
 8000900:	409a      	lsls	r2, r3
 8000902:	0013      	movs	r3, r2
 8000904:	43da      	mvns	r2, r3
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68da      	ldr	r2, [r3, #12]
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	409a      	lsls	r2, r3
 8000916:	0013      	movs	r3, r2
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4313      	orrs	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800092a:	2201      	movs	r2, #1
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	409a      	lsls	r2, r3
 8000930:	0013      	movs	r3, r2
 8000932:	43da      	mvns	r2, r3
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	4013      	ands	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	091b      	lsrs	r3, r3, #4
 8000940:	2201      	movs	r2, #1
 8000942:	401a      	ands	r2, r3
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	409a      	lsls	r2, r3
 8000948:	0013      	movs	r3, r2
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4313      	orrs	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	2203      	movs	r2, #3
 8000962:	409a      	lsls	r2, r3
 8000964:	0013      	movs	r3, r2
 8000966:	43da      	mvns	r2, r3
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	689a      	ldr	r2, [r3, #8]
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	409a      	lsls	r2, r3
 8000978:	0013      	movs	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	2b02      	cmp	r3, #2
 800098c:	d003      	beq.n	8000996 <HAL_GPIO_Init+0xea>
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	2b12      	cmp	r3, #18
 8000994:	d123      	bne.n	80009de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	08da      	lsrs	r2, r3, #3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3208      	adds	r2, #8
 800099e:	0092      	lsls	r2, r2, #2
 80009a0:	58d3      	ldr	r3, [r2, r3]
 80009a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	2207      	movs	r2, #7
 80009a8:	4013      	ands	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	220f      	movs	r2, #15
 80009ae:	409a      	lsls	r2, r3
 80009b0:	0013      	movs	r3, r2
 80009b2:	43da      	mvns	r2, r3
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	691a      	ldr	r2, [r3, #16]
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	2107      	movs	r1, #7
 80009c2:	400b      	ands	r3, r1
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	409a      	lsls	r2, r3
 80009c8:	0013      	movs	r3, r2
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	08da      	lsrs	r2, r3, #3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3208      	adds	r2, #8
 80009d8:	0092      	lsls	r2, r2, #2
 80009da:	6939      	ldr	r1, [r7, #16]
 80009dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	2203      	movs	r2, #3
 80009ea:	409a      	lsls	r2, r3
 80009ec:	0013      	movs	r3, r2
 80009ee:	43da      	mvns	r2, r3
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	2203      	movs	r2, #3
 80009fc:	401a      	ands	r2, r3
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	409a      	lsls	r2, r3
 8000a04:	0013      	movs	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685a      	ldr	r2, [r3, #4]
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	055b      	lsls	r3, r3, #21
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	d100      	bne.n	8000a20 <HAL_GPIO_Init+0x174>
 8000a1e:	e09a      	b.n	8000b56 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a20:	4b54      	ldr	r3, [pc, #336]	; (8000b74 <HAL_GPIO_Init+0x2c8>)
 8000a22:	699a      	ldr	r2, [r3, #24]
 8000a24:	4b53      	ldr	r3, [pc, #332]	; (8000b74 <HAL_GPIO_Init+0x2c8>)
 8000a26:	2101      	movs	r1, #1
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	619a      	str	r2, [r3, #24]
 8000a2c:	4b51      	ldr	r3, [pc, #324]	; (8000b74 <HAL_GPIO_Init+0x2c8>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	2201      	movs	r2, #1
 8000a32:	4013      	ands	r3, r2
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a38:	4a4f      	ldr	r2, [pc, #316]	; (8000b78 <HAL_GPIO_Init+0x2cc>)
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	089b      	lsrs	r3, r3, #2
 8000a3e:	3302      	adds	r3, #2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	589b      	ldr	r3, [r3, r2]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	2203      	movs	r2, #3
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	220f      	movs	r2, #15
 8000a50:	409a      	lsls	r2, r3
 8000a52:	0013      	movs	r3, r2
 8000a54:	43da      	mvns	r2, r3
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	2390      	movs	r3, #144	; 0x90
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d013      	beq.n	8000a8e <HAL_GPIO_Init+0x1e2>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a44      	ldr	r2, [pc, #272]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d00d      	beq.n	8000a8a <HAL_GPIO_Init+0x1de>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a43      	ldr	r2, [pc, #268]	; (8000b80 <HAL_GPIO_Init+0x2d4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d007      	beq.n	8000a86 <HAL_GPIO_Init+0x1da>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a42      	ldr	r2, [pc, #264]	; (8000b84 <HAL_GPIO_Init+0x2d8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d101      	bne.n	8000a82 <HAL_GPIO_Init+0x1d6>
 8000a7e:	2303      	movs	r3, #3
 8000a80:	e006      	b.n	8000a90 <HAL_GPIO_Init+0x1e4>
 8000a82:	2305      	movs	r3, #5
 8000a84:	e004      	b.n	8000a90 <HAL_GPIO_Init+0x1e4>
 8000a86:	2302      	movs	r3, #2
 8000a88:	e002      	b.n	8000a90 <HAL_GPIO_Init+0x1e4>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <HAL_GPIO_Init+0x1e4>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	2103      	movs	r1, #3
 8000a94:	400a      	ands	r2, r1
 8000a96:	0092      	lsls	r2, r2, #2
 8000a98:	4093      	lsls	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aa0:	4935      	ldr	r1, [pc, #212]	; (8000b78 <HAL_GPIO_Init+0x2cc>)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aae:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <HAL_GPIO_Init+0x2dc>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	025b      	lsls	r3, r3, #9
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <HAL_GPIO_Init+0x2dc>)
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <HAL_GPIO_Init+0x2dc>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	43da      	mvns	r2, r3
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	029b      	lsls	r3, r3, #10
 8000af0:	4013      	ands	r3, r2
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000afc:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <HAL_GPIO_Init+0x2dc>)
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_GPIO_Init+0x2dc>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	035b      	lsls	r3, r3, #13
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_GPIO_Init+0x2dc>)
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_GPIO_Init+0x2dc>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	43da      	mvns	r2, r3
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	039b      	lsls	r3, r3, #14
 8000b44:	4013      	ands	r3, r2
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <HAL_GPIO_Init+0x2dc>)
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	40da      	lsrs	r2, r3
 8000b64:	1e13      	subs	r3, r2, #0
 8000b66:	d000      	beq.n	8000b6a <HAL_GPIO_Init+0x2be>
 8000b68:	e6a8      	b.n	80008bc <HAL_GPIO_Init+0x10>
  } 
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b006      	add	sp, #24
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010000 	.word	0x40010000
 8000b7c:	48000400 	.word	0x48000400
 8000b80:	48000800 	.word	0x48000800
 8000b84:	48000c00 	.word	0x48000c00
 8000b88:	40010400 	.word	0x40010400

08000b8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000b9a:	e0b1      	b.n	8000d00 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	409a      	lsls	r2, r3
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d100      	bne.n	8000bb0 <HAL_GPIO_DeInit+0x24>
 8000bae:	e0a4      	b.n	8000cfa <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000bb0:	4a58      	ldr	r2, [pc, #352]	; (8000d14 <HAL_GPIO_DeInit+0x188>)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	589b      	ldr	r3, [r3, r2]
 8000bbc:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	2390      	movs	r3, #144	; 0x90
 8000bd4:	05db      	lsls	r3, r3, #23
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d013      	beq.n	8000c02 <HAL_GPIO_DeInit+0x76>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a4e      	ldr	r2, [pc, #312]	; (8000d18 <HAL_GPIO_DeInit+0x18c>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d00d      	beq.n	8000bfe <HAL_GPIO_DeInit+0x72>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a4d      	ldr	r2, [pc, #308]	; (8000d1c <HAL_GPIO_DeInit+0x190>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d007      	beq.n	8000bfa <HAL_GPIO_DeInit+0x6e>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a4c      	ldr	r2, [pc, #304]	; (8000d20 <HAL_GPIO_DeInit+0x194>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d101      	bne.n	8000bf6 <HAL_GPIO_DeInit+0x6a>
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e006      	b.n	8000c04 <HAL_GPIO_DeInit+0x78>
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	e004      	b.n	8000c04 <HAL_GPIO_DeInit+0x78>
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	e002      	b.n	8000c04 <HAL_GPIO_DeInit+0x78>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e000      	b.n	8000c04 <HAL_GPIO_DeInit+0x78>
 8000c02:	2300      	movs	r3, #0
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	2103      	movs	r1, #3
 8000c08:	400a      	ands	r2, r1
 8000c0a:	0092      	lsls	r2, r2, #2
 8000c0c:	4093      	lsls	r3, r2
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d132      	bne.n	8000c7a <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000c14:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <HAL_GPIO_DeInit+0x198>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	4b41      	ldr	r3, [pc, #260]	; (8000d24 <HAL_GPIO_DeInit+0x198>)
 8000c1e:	400a      	ands	r2, r1
 8000c20:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000c22:	4b40      	ldr	r3, [pc, #256]	; (8000d24 <HAL_GPIO_DeInit+0x198>)
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	43d9      	mvns	r1, r3
 8000c2a:	4b3e      	ldr	r3, [pc, #248]	; (8000d24 <HAL_GPIO_DeInit+0x198>)
 8000c2c:	400a      	ands	r2, r1
 8000c2e:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000c30:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <HAL_GPIO_DeInit+0x198>)
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	43d9      	mvns	r1, r3
 8000c38:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <HAL_GPIO_DeInit+0x198>)
 8000c3a:	400a      	ands	r2, r1
 8000c3c:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000c3e:	4b39      	ldr	r3, [pc, #228]	; (8000d24 <HAL_GPIO_DeInit+0x198>)
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	43d9      	mvns	r1, r3
 8000c46:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <HAL_GPIO_DeInit+0x198>)
 8000c48:	400a      	ands	r2, r1
 8000c4a:	60da      	str	r2, [r3, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	2203      	movs	r2, #3
 8000c50:	4013      	ands	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	220f      	movs	r2, #15
 8000c56:	409a      	lsls	r2, r3
 8000c58:	0013      	movs	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000c5c:	4a2d      	ldr	r2, [pc, #180]	; (8000d14 <HAL_GPIO_DeInit+0x188>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	3302      	adds	r3, #2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	589a      	ldr	r2, [r3, r2]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	4829      	ldr	r0, [pc, #164]	; (8000d14 <HAL_GPIO_DeInit+0x188>)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	089b      	lsrs	r3, r3, #2
 8000c72:	400a      	ands	r2, r1
 8000c74:	3302      	adds	r3, #2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	0052      	lsls	r2, r2, #1
 8000c82:	2103      	movs	r1, #3
 8000c84:	4091      	lsls	r1, r2
 8000c86:	000a      	movs	r2, r1
 8000c88:	43d2      	mvns	r2, r2
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	08da      	lsrs	r2, r3, #3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3208      	adds	r2, #8
 8000c98:	0092      	lsls	r2, r2, #2
 8000c9a:	58d3      	ldr	r3, [r2, r3]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	2107      	movs	r1, #7
 8000ca0:	400a      	ands	r2, r1
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	000a      	movs	r2, r1
 8000caa:	43d1      	mvns	r1, r2
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	08d2      	lsrs	r2, r2, #3
 8000cb0:	4019      	ands	r1, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3208      	adds	r2, #8
 8000cb6:	0092      	lsls	r2, r2, #2
 8000cb8:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	0052      	lsls	r2, r2, #1
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	000a      	movs	r2, r1
 8000cc8:	43d2      	mvns	r2, r2
 8000cca:	401a      	ands	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	4091      	lsls	r1, r2
 8000cda:	000a      	movs	r2, r1
 8000cdc:	43d2      	mvns	r2, r2
 8000cde:	401a      	ands	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	0052      	lsls	r2, r2, #1
 8000cec:	2103      	movs	r1, #3
 8000cee:	4091      	lsls	r1, r2
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	43d2      	mvns	r2, r2
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	609a      	str	r2, [r3, #8]

    }

    position++;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	40da      	lsrs	r2, r3
 8000d06:	1e13      	subs	r3, r2, #0
 8000d08:	d000      	beq.n	8000d0c <HAL_GPIO_DeInit+0x180>
 8000d0a:	e747      	b.n	8000b9c <HAL_GPIO_DeInit+0x10>
  }
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b006      	add	sp, #24
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40010000 	.word	0x40010000
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	48000800 	.word	0x48000800
 8000d20:	48000c00 	.word	0x48000c00
 8000d24:	40010400 	.word	0x40010400

08000d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	0008      	movs	r0, r1
 8000d32:	0011      	movs	r1, r2
 8000d34:	1cbb      	adds	r3, r7, #2
 8000d36:	1c02      	adds	r2, r0, #0
 8000d38:	801a      	strh	r2, [r3, #0]
 8000d3a:	1c7b      	adds	r3, r7, #1
 8000d3c:	1c0a      	adds	r2, r1, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d40:	1c7b      	adds	r3, r7, #1
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d004      	beq.n	8000d52 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d48:	1cbb      	adds	r3, r7, #2
 8000d4a:	881a      	ldrh	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d50:	e003      	b.n	8000d5a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d52:	1cbb      	adds	r3, r7, #2
 8000d54:	881a      	ldrh	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e305      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d100      	bne.n	8000d82 <HAL_RCC_OscConfig+0x1e>
 8000d80:	e08d      	b.n	8000e9e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d82:	4bc5      	ldr	r3, [pc, #788]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	220c      	movs	r2, #12
 8000d88:	4013      	ands	r3, r2
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	d00e      	beq.n	8000dac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d8e:	4bc2      	ldr	r3, [pc, #776]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	220c      	movs	r2, #12
 8000d94:	4013      	ands	r3, r2
 8000d96:	2b08      	cmp	r3, #8
 8000d98:	d116      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x64>
 8000d9a:	4bbf      	ldr	r3, [pc, #764]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	23c0      	movs	r3, #192	; 0xc0
 8000da0:	025b      	lsls	r3, r3, #9
 8000da2:	401a      	ands	r2, r3
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	025b      	lsls	r3, r3, #9
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d10d      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dac:	4bba      	ldr	r3, [pc, #744]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	029b      	lsls	r3, r3, #10
 8000db4:	4013      	ands	r3, r2
 8000db6:	d100      	bne.n	8000dba <HAL_RCC_OscConfig+0x56>
 8000db8:	e070      	b.n	8000e9c <HAL_RCC_OscConfig+0x138>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d000      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x60>
 8000dc2:	e06b      	b.n	8000e9c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e2dc      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d107      	bne.n	8000de0 <HAL_RCC_OscConfig+0x7c>
 8000dd0:	4bb1      	ldr	r3, [pc, #708]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4bb0      	ldr	r3, [pc, #704]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	0249      	lsls	r1, r1, #9
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e02f      	b.n	8000e40 <HAL_RCC_OscConfig+0xdc>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10c      	bne.n	8000e02 <HAL_RCC_OscConfig+0x9e>
 8000de8:	4bab      	ldr	r3, [pc, #684]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4baa      	ldr	r3, [pc, #680]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000dee:	49ab      	ldr	r1, [pc, #684]	; (800109c <HAL_RCC_OscConfig+0x338>)
 8000df0:	400a      	ands	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	4ba8      	ldr	r3, [pc, #672]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4ba7      	ldr	r3, [pc, #668]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000dfa:	49a9      	ldr	r1, [pc, #676]	; (80010a0 <HAL_RCC_OscConfig+0x33c>)
 8000dfc:	400a      	ands	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	e01e      	b.n	8000e40 <HAL_RCC_OscConfig+0xdc>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	d10e      	bne.n	8000e28 <HAL_RCC_OscConfig+0xc4>
 8000e0a:	4ba3      	ldr	r3, [pc, #652]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4ba2      	ldr	r3, [pc, #648]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	02c9      	lsls	r1, r1, #11
 8000e14:	430a      	orrs	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	4b9f      	ldr	r3, [pc, #636]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b9e      	ldr	r3, [pc, #632]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	0249      	lsls	r1, r1, #9
 8000e22:	430a      	orrs	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	e00b      	b.n	8000e40 <HAL_RCC_OscConfig+0xdc>
 8000e28:	4b9b      	ldr	r3, [pc, #620]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b9a      	ldr	r3, [pc, #616]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000e2e:	499b      	ldr	r1, [pc, #620]	; (800109c <HAL_RCC_OscConfig+0x338>)
 8000e30:	400a      	ands	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	4b98      	ldr	r3, [pc, #608]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b97      	ldr	r3, [pc, #604]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000e3a:	4999      	ldr	r1, [pc, #612]	; (80010a0 <HAL_RCC_OscConfig+0x33c>)
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d014      	beq.n	8000e72 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fc48 	bl	80006dc <HAL_GetTick>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e52:	f7ff fc43 	bl	80006dc <HAL_GetTick>
 8000e56:	0002      	movs	r2, r0
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b64      	cmp	r3, #100	; 0x64
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e28e      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e64:	4b8c      	ldr	r3, [pc, #560]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	029b      	lsls	r3, r3, #10
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d0f0      	beq.n	8000e52 <HAL_RCC_OscConfig+0xee>
 8000e70:	e015      	b.n	8000e9e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e72:	f7ff fc33 	bl	80006dc <HAL_GetTick>
 8000e76:	0003      	movs	r3, r0
 8000e78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7c:	f7ff fc2e 	bl	80006dc <HAL_GetTick>
 8000e80:	0002      	movs	r2, r0
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b64      	cmp	r3, #100	; 0x64
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e279      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e8e:	4b82      	ldr	r3, [pc, #520]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	029b      	lsls	r3, r3, #10
 8000e96:	4013      	ands	r3, r2
 8000e98:	d1f0      	bne.n	8000e7c <HAL_RCC_OscConfig+0x118>
 8000e9a:	e000      	b.n	8000e9e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <HAL_RCC_OscConfig+0x146>
 8000ea8:	e06c      	b.n	8000f84 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eaa:	4b7b      	ldr	r3, [pc, #492]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	220c      	movs	r2, #12
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d00e      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eb4:	4b78      	ldr	r3, [pc, #480]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	220c      	movs	r2, #12
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d11f      	bne.n	8000f00 <HAL_RCC_OscConfig+0x19c>
 8000ec0:	4b75      	ldr	r3, [pc, #468]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	23c0      	movs	r3, #192	; 0xc0
 8000ec6:	025b      	lsls	r3, r3, #9
 8000ec8:	401a      	ands	r2, r3
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d116      	bne.n	8000f00 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed2:	4b71      	ldr	r3, [pc, #452]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d005      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x184>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d001      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e24c      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee8:	4b6b      	ldr	r3, [pc, #428]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	22f8      	movs	r2, #248	; 0xf8
 8000eee:	4393      	bics	r3, r2
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	00da      	lsls	r2, r3, #3
 8000ef8:	4b67      	ldr	r3, [pc, #412]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efe:	e041      	b.n	8000f84 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d024      	beq.n	8000f52 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f08:	4b63      	ldr	r3, [pc, #396]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b62      	ldr	r3, [pc, #392]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	430a      	orrs	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f14:	f7ff fbe2 	bl	80006dc <HAL_GetTick>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f1e:	f7ff fbdd 	bl	80006dc <HAL_GetTick>
 8000f22:	0002      	movs	r2, r0
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e228      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f30:	4b59      	ldr	r3, [pc, #356]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2202      	movs	r2, #2
 8000f36:	4013      	ands	r3, r2
 8000f38:	d0f1      	beq.n	8000f1e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3a:	4b57      	ldr	r3, [pc, #348]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	22f8      	movs	r2, #248	; 0xf8
 8000f40:	4393      	bics	r3, r2
 8000f42:	0019      	movs	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	00da      	lsls	r2, r3, #3
 8000f4a:	4b53      	ldr	r3, [pc, #332]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	e018      	b.n	8000f84 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f52:	4b51      	ldr	r3, [pc, #324]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b50      	ldr	r3, [pc, #320]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000f58:	2101      	movs	r1, #1
 8000f5a:	438a      	bics	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5e:	f7ff fbbd 	bl	80006dc <HAL_GetTick>
 8000f62:	0003      	movs	r3, r0
 8000f64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f68:	f7ff fbb8 	bl	80006dc <HAL_GetTick>
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e203      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7a:	4b47      	ldr	r3, [pc, #284]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2202      	movs	r2, #2
 8000f80:	4013      	ands	r3, r2
 8000f82:	d1f1      	bne.n	8000f68 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2208      	movs	r2, #8
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d036      	beq.n	8000ffc <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d019      	beq.n	8000fca <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f96:	4b40      	ldr	r3, [pc, #256]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa2:	f7ff fb9b 	bl	80006dc <HAL_GetTick>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fac:	f7ff fb96 	bl	80006dc <HAL_GetTick>
 8000fb0:	0002      	movs	r2, r0
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e1e1      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fbe:	4b36      	ldr	r3, [pc, #216]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d0f1      	beq.n	8000fac <HAL_RCC_OscConfig+0x248>
 8000fc8:	e018      	b.n	8000ffc <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fca:	4b33      	ldr	r3, [pc, #204]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	438a      	bics	r2, r1
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd6:	f7ff fb81 	bl	80006dc <HAL_GetTick>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fe0:	f7ff fb7c 	bl	80006dc <HAL_GetTick>
 8000fe4:	0002      	movs	r2, r0
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e1c7      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff2:	4b29      	ldr	r3, [pc, #164]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d1f1      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2204      	movs	r2, #4
 8001002:	4013      	ands	r3, r2
 8001004:	d100      	bne.n	8001008 <HAL_RCC_OscConfig+0x2a4>
 8001006:	e0b5      	b.n	8001174 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001008:	231f      	movs	r3, #31
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8001012:	69da      	ldr	r2, [r3, #28]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	055b      	lsls	r3, r3, #21
 8001018:	4013      	ands	r3, r2
 800101a:	d111      	bne.n	8001040 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 800101e:	69da      	ldr	r2, [r3, #28]
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8001022:	2180      	movs	r1, #128	; 0x80
 8001024:	0549      	lsls	r1, r1, #21
 8001026:	430a      	orrs	r2, r1
 8001028:	61da      	str	r2, [r3, #28]
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 800102c:	69da      	ldr	r2, [r3, #28]
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	055b      	lsls	r3, r3, #21
 8001032:	4013      	ands	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001038:	231f      	movs	r3, #31
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_RCC_OscConfig+0x340>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4013      	ands	r3, r2
 800104a:	d11a      	bne.n	8001082 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_RCC_OscConfig+0x340>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_RCC_OscConfig+0x340>)
 8001052:	2180      	movs	r1, #128	; 0x80
 8001054:	0049      	lsls	r1, r1, #1
 8001056:	430a      	orrs	r2, r1
 8001058:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800105a:	f7ff fb3f 	bl	80006dc <HAL_GetTick>
 800105e:	0003      	movs	r3, r0
 8001060:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001064:	f7ff fb3a 	bl	80006dc <HAL_GetTick>
 8001068:	0002      	movs	r2, r0
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b64      	cmp	r3, #100	; 0x64
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e185      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_RCC_OscConfig+0x340>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4013      	ands	r3, r2
 8001080:	d0f0      	beq.n	8001064 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d10e      	bne.n	80010a8 <HAL_RCC_OscConfig+0x344>
 800108a:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 800108c:	6a1a      	ldr	r2, [r3, #32]
 800108e:	4b02      	ldr	r3, [pc, #8]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8001090:	2101      	movs	r1, #1
 8001092:	430a      	orrs	r2, r1
 8001094:	621a      	str	r2, [r3, #32]
 8001096:	e035      	b.n	8001104 <HAL_RCC_OscConfig+0x3a0>
 8001098:	40021000 	.word	0x40021000
 800109c:	fffeffff 	.word	0xfffeffff
 80010a0:	fffbffff 	.word	0xfffbffff
 80010a4:	40007000 	.word	0x40007000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10c      	bne.n	80010ca <HAL_RCC_OscConfig+0x366>
 80010b0:	4bb6      	ldr	r3, [pc, #728]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80010b2:	6a1a      	ldr	r2, [r3, #32]
 80010b4:	4bb5      	ldr	r3, [pc, #724]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80010b6:	2101      	movs	r1, #1
 80010b8:	438a      	bics	r2, r1
 80010ba:	621a      	str	r2, [r3, #32]
 80010bc:	4bb3      	ldr	r3, [pc, #716]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80010be:	6a1a      	ldr	r2, [r3, #32]
 80010c0:	4bb2      	ldr	r3, [pc, #712]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80010c2:	2104      	movs	r1, #4
 80010c4:	438a      	bics	r2, r1
 80010c6:	621a      	str	r2, [r3, #32]
 80010c8:	e01c      	b.n	8001104 <HAL_RCC_OscConfig+0x3a0>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b05      	cmp	r3, #5
 80010d0:	d10c      	bne.n	80010ec <HAL_RCC_OscConfig+0x388>
 80010d2:	4bae      	ldr	r3, [pc, #696]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80010d4:	6a1a      	ldr	r2, [r3, #32]
 80010d6:	4bad      	ldr	r3, [pc, #692]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80010d8:	2104      	movs	r1, #4
 80010da:	430a      	orrs	r2, r1
 80010dc:	621a      	str	r2, [r3, #32]
 80010de:	4bab      	ldr	r3, [pc, #684]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80010e0:	6a1a      	ldr	r2, [r3, #32]
 80010e2:	4baa      	ldr	r3, [pc, #680]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	430a      	orrs	r2, r1
 80010e8:	621a      	str	r2, [r3, #32]
 80010ea:	e00b      	b.n	8001104 <HAL_RCC_OscConfig+0x3a0>
 80010ec:	4ba7      	ldr	r3, [pc, #668]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80010ee:	6a1a      	ldr	r2, [r3, #32]
 80010f0:	4ba6      	ldr	r3, [pc, #664]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80010f2:	2101      	movs	r1, #1
 80010f4:	438a      	bics	r2, r1
 80010f6:	621a      	str	r2, [r3, #32]
 80010f8:	4ba4      	ldr	r3, [pc, #656]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80010fa:	6a1a      	ldr	r2, [r3, #32]
 80010fc:	4ba3      	ldr	r3, [pc, #652]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80010fe:	2104      	movs	r1, #4
 8001100:	438a      	bics	r2, r1
 8001102:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d014      	beq.n	8001136 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110c:	f7ff fae6 	bl	80006dc <HAL_GetTick>
 8001110:	0003      	movs	r3, r0
 8001112:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001114:	e009      	b.n	800112a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001116:	f7ff fae1 	bl	80006dc <HAL_GetTick>
 800111a:	0002      	movs	r2, r0
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	4a9b      	ldr	r2, [pc, #620]	; (8001390 <HAL_RCC_OscConfig+0x62c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e12b      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800112a:	4b98      	ldr	r3, [pc, #608]	; (800138c <HAL_RCC_OscConfig+0x628>)
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	2202      	movs	r2, #2
 8001130:	4013      	ands	r3, r2
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x3b2>
 8001134:	e013      	b.n	800115e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001136:	f7ff fad1 	bl	80006dc <HAL_GetTick>
 800113a:	0003      	movs	r3, r0
 800113c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113e:	e009      	b.n	8001154 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001140:	f7ff facc 	bl	80006dc <HAL_GetTick>
 8001144:	0002      	movs	r2, r0
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	4a91      	ldr	r2, [pc, #580]	; (8001390 <HAL_RCC_OscConfig+0x62c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e116      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001154:	4b8d      	ldr	r3, [pc, #564]	; (800138c <HAL_RCC_OscConfig+0x628>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	2202      	movs	r2, #2
 800115a:	4013      	ands	r3, r2
 800115c:	d1f0      	bne.n	8001140 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800115e:	231f      	movs	r3, #31
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d105      	bne.n	8001174 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001168:	4b88      	ldr	r3, [pc, #544]	; (800138c <HAL_RCC_OscConfig+0x628>)
 800116a:	69da      	ldr	r2, [r3, #28]
 800116c:	4b87      	ldr	r3, [pc, #540]	; (800138c <HAL_RCC_OscConfig+0x628>)
 800116e:	4989      	ldr	r1, [pc, #548]	; (8001394 <HAL_RCC_OscConfig+0x630>)
 8001170:	400a      	ands	r2, r1
 8001172:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2210      	movs	r2, #16
 800117a:	4013      	ands	r3, r2
 800117c:	d063      	beq.n	8001246 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d12a      	bne.n	80011dc <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001186:	4b81      	ldr	r3, [pc, #516]	; (800138c <HAL_RCC_OscConfig+0x628>)
 8001188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800118a:	4b80      	ldr	r3, [pc, #512]	; (800138c <HAL_RCC_OscConfig+0x628>)
 800118c:	2104      	movs	r1, #4
 800118e:	430a      	orrs	r2, r1
 8001190:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001192:	4b7e      	ldr	r3, [pc, #504]	; (800138c <HAL_RCC_OscConfig+0x628>)
 8001194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001196:	4b7d      	ldr	r3, [pc, #500]	; (800138c <HAL_RCC_OscConfig+0x628>)
 8001198:	2101      	movs	r1, #1
 800119a:	430a      	orrs	r2, r1
 800119c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119e:	f7ff fa9d 	bl	80006dc <HAL_GetTick>
 80011a2:	0003      	movs	r3, r0
 80011a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011a8:	f7ff fa98 	bl	80006dc <HAL_GetTick>
 80011ac:	0002      	movs	r2, r0
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e0e3      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011ba:	4b74      	ldr	r3, [pc, #464]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80011bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011be:	2202      	movs	r2, #2
 80011c0:	4013      	ands	r3, r2
 80011c2:	d0f1      	beq.n	80011a8 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011c4:	4b71      	ldr	r3, [pc, #452]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80011c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c8:	22f8      	movs	r2, #248	; 0xf8
 80011ca:	4393      	bics	r3, r2
 80011cc:	0019      	movs	r1, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	00da      	lsls	r2, r3, #3
 80011d4:	4b6d      	ldr	r3, [pc, #436]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80011d6:	430a      	orrs	r2, r1
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34
 80011da:	e034      	b.n	8001246 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	3305      	adds	r3, #5
 80011e2:	d111      	bne.n	8001208 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011e4:	4b69      	ldr	r3, [pc, #420]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80011e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e8:	4b68      	ldr	r3, [pc, #416]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80011ea:	2104      	movs	r1, #4
 80011ec:	438a      	bics	r2, r1
 80011ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011f0:	4b66      	ldr	r3, [pc, #408]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80011f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f4:	22f8      	movs	r2, #248	; 0xf8
 80011f6:	4393      	bics	r3, r2
 80011f8:	0019      	movs	r1, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	00da      	lsls	r2, r3, #3
 8001200:	4b62      	ldr	r3, [pc, #392]	; (800138c <HAL_RCC_OscConfig+0x628>)
 8001202:	430a      	orrs	r2, r1
 8001204:	635a      	str	r2, [r3, #52]	; 0x34
 8001206:	e01e      	b.n	8001246 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001208:	4b60      	ldr	r3, [pc, #384]	; (800138c <HAL_RCC_OscConfig+0x628>)
 800120a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800120c:	4b5f      	ldr	r3, [pc, #380]	; (800138c <HAL_RCC_OscConfig+0x628>)
 800120e:	2104      	movs	r1, #4
 8001210:	430a      	orrs	r2, r1
 8001212:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001214:	4b5d      	ldr	r3, [pc, #372]	; (800138c <HAL_RCC_OscConfig+0x628>)
 8001216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001218:	4b5c      	ldr	r3, [pc, #368]	; (800138c <HAL_RCC_OscConfig+0x628>)
 800121a:	2101      	movs	r1, #1
 800121c:	438a      	bics	r2, r1
 800121e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001220:	f7ff fa5c 	bl	80006dc <HAL_GetTick>
 8001224:	0003      	movs	r3, r0
 8001226:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800122a:	f7ff fa57 	bl	80006dc <HAL_GetTick>
 800122e:	0002      	movs	r2, r0
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e0a2      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800123c:	4b53      	ldr	r3, [pc, #332]	; (800138c <HAL_RCC_OscConfig+0x628>)
 800123e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001240:	2202      	movs	r2, #2
 8001242:	4013      	ands	r3, r2
 8001244:	d1f1      	bne.n	800122a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d100      	bne.n	8001250 <HAL_RCC_OscConfig+0x4ec>
 800124e:	e097      	b.n	8001380 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001250:	4b4e      	ldr	r3, [pc, #312]	; (800138c <HAL_RCC_OscConfig+0x628>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	220c      	movs	r2, #12
 8001256:	4013      	ands	r3, r2
 8001258:	2b08      	cmp	r3, #8
 800125a:	d100      	bne.n	800125e <HAL_RCC_OscConfig+0x4fa>
 800125c:	e06b      	b.n	8001336 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d14c      	bne.n	8001300 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001266:	4b49      	ldr	r3, [pc, #292]	; (800138c <HAL_RCC_OscConfig+0x628>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b48      	ldr	r3, [pc, #288]	; (800138c <HAL_RCC_OscConfig+0x628>)
 800126c:	494a      	ldr	r1, [pc, #296]	; (8001398 <HAL_RCC_OscConfig+0x634>)
 800126e:	400a      	ands	r2, r1
 8001270:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff fa33 	bl	80006dc <HAL_GetTick>
 8001276:	0003      	movs	r3, r0
 8001278:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff fa2e 	bl	80006dc <HAL_GetTick>
 8001280:	0002      	movs	r2, r0
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e079      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128e:	4b3f      	ldr	r3, [pc, #252]	; (800138c <HAL_RCC_OscConfig+0x628>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	049b      	lsls	r3, r3, #18
 8001296:	4013      	ands	r3, r2
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800129a:	4b3c      	ldr	r3, [pc, #240]	; (800138c <HAL_RCC_OscConfig+0x628>)
 800129c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129e:	220f      	movs	r2, #15
 80012a0:	4393      	bics	r3, r2
 80012a2:	0019      	movs	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a8:	4b38      	ldr	r3, [pc, #224]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80012aa:	430a      	orrs	r2, r1
 80012ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80012ae:	4b37      	ldr	r3, [pc, #220]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4a3a      	ldr	r2, [pc, #232]	; (800139c <HAL_RCC_OscConfig+0x638>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	0019      	movs	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	431a      	orrs	r2, r3
 80012c2:	4b32      	ldr	r3, [pc, #200]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80012c4:	430a      	orrs	r2, r1
 80012c6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c8:	4b30      	ldr	r3, [pc, #192]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80012ce:	2180      	movs	r1, #128	; 0x80
 80012d0:	0449      	lsls	r1, r1, #17
 80012d2:	430a      	orrs	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d6:	f7ff fa01 	bl	80006dc <HAL_GetTick>
 80012da:	0003      	movs	r3, r0
 80012dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e0:	f7ff f9fc 	bl	80006dc <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e047      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_RCC_OscConfig+0x628>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	049b      	lsls	r3, r3, #18
 80012fa:	4013      	ands	r3, r2
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x57c>
 80012fe:	e03f      	b.n	8001380 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001300:	4b22      	ldr	r3, [pc, #136]	; (800138c <HAL_RCC_OscConfig+0x628>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <HAL_RCC_OscConfig+0x628>)
 8001306:	4924      	ldr	r1, [pc, #144]	; (8001398 <HAL_RCC_OscConfig+0x634>)
 8001308:	400a      	ands	r2, r1
 800130a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff f9e6 	bl	80006dc <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001316:	f7ff f9e1 	bl	80006dc <HAL_GetTick>
 800131a:	0002      	movs	r2, r0
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e02c      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_RCC_OscConfig+0x628>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	049b      	lsls	r3, r3, #18
 8001330:	4013      	ands	r3, r2
 8001332:	d1f0      	bne.n	8001316 <HAL_RCC_OscConfig+0x5b2>
 8001334:	e024      	b.n	8001380 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e01f      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_RCC_OscConfig+0x628>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001348:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_RCC_OscConfig+0x628>)
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	23c0      	movs	r3, #192	; 0xc0
 8001352:	025b      	lsls	r3, r3, #9
 8001354:	401a      	ands	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	429a      	cmp	r2, r3
 800135c:	d10e      	bne.n	800137c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	220f      	movs	r2, #15
 8001362:	401a      	ands	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001368:	429a      	cmp	r2, r3
 800136a:	d107      	bne.n	800137c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	23f0      	movs	r3, #240	; 0xf0
 8001370:	039b      	lsls	r3, r3, #14
 8001372:	401a      	ands	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d001      	beq.n	8001380 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	b008      	add	sp, #32
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	40021000 	.word	0x40021000
 8001390:	00001388 	.word	0x00001388
 8001394:	efffffff 	.word	0xefffffff
 8001398:	feffffff 	.word	0xfeffffff
 800139c:	ffc27fff 	.word	0xffc27fff

080013a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0b3      	b.n	800151c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b4:	4b5b      	ldr	r3, [pc, #364]	; (8001524 <HAL_RCC_ClockConfig+0x184>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2201      	movs	r2, #1
 80013ba:	4013      	ands	r3, r2
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d911      	bls.n	80013e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	4b58      	ldr	r3, [pc, #352]	; (8001524 <HAL_RCC_ClockConfig+0x184>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2201      	movs	r2, #1
 80013c8:	4393      	bics	r3, r2
 80013ca:	0019      	movs	r1, r3
 80013cc:	4b55      	ldr	r3, [pc, #340]	; (8001524 <HAL_RCC_ClockConfig+0x184>)
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d4:	4b53      	ldr	r3, [pc, #332]	; (8001524 <HAL_RCC_ClockConfig+0x184>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2201      	movs	r2, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e09a      	b.n	800151c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2202      	movs	r2, #2
 80013ec:	4013      	ands	r3, r2
 80013ee:	d015      	beq.n	800141c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2204      	movs	r2, #4
 80013f6:	4013      	ands	r3, r2
 80013f8:	d006      	beq.n	8001408 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013fa:	4b4b      	ldr	r3, [pc, #300]	; (8001528 <HAL_RCC_ClockConfig+0x188>)
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4b4a      	ldr	r3, [pc, #296]	; (8001528 <HAL_RCC_ClockConfig+0x188>)
 8001400:	21e0      	movs	r1, #224	; 0xe0
 8001402:	00c9      	lsls	r1, r1, #3
 8001404:	430a      	orrs	r2, r1
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001408:	4b47      	ldr	r3, [pc, #284]	; (8001528 <HAL_RCC_ClockConfig+0x188>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	22f0      	movs	r2, #240	; 0xf0
 800140e:	4393      	bics	r3, r2
 8001410:	0019      	movs	r1, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	4b44      	ldr	r3, [pc, #272]	; (8001528 <HAL_RCC_ClockConfig+0x188>)
 8001418:	430a      	orrs	r2, r1
 800141a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2201      	movs	r2, #1
 8001422:	4013      	ands	r3, r2
 8001424:	d040      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d107      	bne.n	800143e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <HAL_RCC_ClockConfig+0x188>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	029b      	lsls	r3, r3, #10
 8001436:	4013      	ands	r3, r2
 8001438:	d114      	bne.n	8001464 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e06e      	b.n	800151c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d107      	bne.n	8001456 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001446:	4b38      	ldr	r3, [pc, #224]	; (8001528 <HAL_RCC_ClockConfig+0x188>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	049b      	lsls	r3, r3, #18
 800144e:	4013      	ands	r3, r2
 8001450:	d108      	bne.n	8001464 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e062      	b.n	800151c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001456:	4b34      	ldr	r3, [pc, #208]	; (8001528 <HAL_RCC_ClockConfig+0x188>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2202      	movs	r2, #2
 800145c:	4013      	ands	r3, r2
 800145e:	d101      	bne.n	8001464 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e05b      	b.n	800151c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001464:	4b30      	ldr	r3, [pc, #192]	; (8001528 <HAL_RCC_ClockConfig+0x188>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2203      	movs	r2, #3
 800146a:	4393      	bics	r3, r2
 800146c:	0019      	movs	r1, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <HAL_RCC_ClockConfig+0x188>)
 8001474:	430a      	orrs	r2, r1
 8001476:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001478:	f7ff f930 	bl	80006dc <HAL_GetTick>
 800147c:	0003      	movs	r3, r0
 800147e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001480:	e009      	b.n	8001496 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001482:	f7ff f92b 	bl	80006dc <HAL_GetTick>
 8001486:	0002      	movs	r2, r0
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	4a27      	ldr	r2, [pc, #156]	; (800152c <HAL_RCC_ClockConfig+0x18c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e042      	b.n	800151c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <HAL_RCC_ClockConfig+0x188>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	220c      	movs	r2, #12
 800149c:	401a      	ands	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d1ec      	bne.n	8001482 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014a8:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <HAL_RCC_ClockConfig+0x184>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2201      	movs	r2, #1
 80014ae:	4013      	ands	r3, r2
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d211      	bcs.n	80014da <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b6:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_RCC_ClockConfig+0x184>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2201      	movs	r2, #1
 80014bc:	4393      	bics	r3, r2
 80014be:	0019      	movs	r1, r3
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_RCC_ClockConfig+0x184>)
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_RCC_ClockConfig+0x184>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2201      	movs	r2, #1
 80014ce:	4013      	ands	r3, r2
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d001      	beq.n	80014da <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e020      	b.n	800151c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2204      	movs	r2, #4
 80014e0:	4013      	ands	r3, r2
 80014e2:	d009      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_RCC_ClockConfig+0x188>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	4a11      	ldr	r2, [pc, #68]	; (8001530 <HAL_RCC_ClockConfig+0x190>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	0019      	movs	r1, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_RCC_ClockConfig+0x188>)
 80014f4:	430a      	orrs	r2, r1
 80014f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014f8:	f000 f820 	bl	800153c <HAL_RCC_GetSysClockFreq>
 80014fc:	0001      	movs	r1, r0
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_RCC_ClockConfig+0x188>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	220f      	movs	r2, #15
 8001506:	4013      	ands	r3, r2
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <HAL_RCC_ClockConfig+0x194>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	000a      	movs	r2, r1
 800150e:	40da      	lsrs	r2, r3
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_RCC_ClockConfig+0x198>)
 8001512:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff f89b 	bl	8000650 <HAL_InitTick>
  
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	b004      	add	sp, #16
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40022000 	.word	0x40022000
 8001528:	40021000 	.word	0x40021000
 800152c:	00001388 	.word	0x00001388
 8001530:	fffff8ff 	.word	0xfffff8ff
 8001534:	080022fc 	.word	0x080022fc
 8001538:	20000000 	.word	0x20000000

0800153c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b08f      	sub	sp, #60	; 0x3c
 8001540:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001542:	2314      	movs	r3, #20
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	4a2c      	ldr	r2, [pc, #176]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001548:	ca13      	ldmia	r2!, {r0, r1, r4}
 800154a:	c313      	stmia	r3!, {r0, r1, r4}
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4a2a      	ldr	r2, [pc, #168]	; (80015fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001554:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001556:	c313      	stmia	r3!, {r0, r1, r4}
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
 8001564:	2300      	movs	r3, #0
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001570:	4b23      	ldr	r3, [pc, #140]	; (8001600 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001578:	220c      	movs	r2, #12
 800157a:	4013      	ands	r3, r2
 800157c:	2b04      	cmp	r3, #4
 800157e:	d002      	beq.n	8001586 <HAL_RCC_GetSysClockFreq+0x4a>
 8001580:	2b08      	cmp	r3, #8
 8001582:	d003      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0x50>
 8001584:	e02f      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800158a:	e02f      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	220f      	movs	r2, #15
 8001592:	4013      	ands	r3, r2
 8001594:	2214      	movs	r2, #20
 8001596:	18ba      	adds	r2, r7, r2
 8001598:	5cd3      	ldrb	r3, [r2, r3]
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_RCC_GetSysClockFreq+0xc4>)
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	220f      	movs	r2, #15
 80015a2:	4013      	ands	r3, r2
 80015a4:	1d3a      	adds	r2, r7, #4
 80015a6:	5cd3      	ldrb	r3, [r2, r3]
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ac:	23c0      	movs	r3, #192	; 0xc0
 80015ae:	025b      	lsls	r3, r3, #9
 80015b0:	401a      	ands	r2, r3
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	025b      	lsls	r3, r3, #9
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d109      	bne.n	80015ce <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015bc:	4811      	ldr	r0, [pc, #68]	; (8001604 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015be:	f7fe fda3 	bl	8000108 <__udivsi3>
 80015c2:	0003      	movs	r3, r0
 80015c4:	001a      	movs	r2, r3
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	4353      	muls	r3, r2
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015d2:	f7fe fd99 	bl	8000108 <__udivsi3>
 80015d6:	0003      	movs	r3, r0
 80015d8:	001a      	movs	r2, r3
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	4353      	muls	r3, r2
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80015e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015e4:	e002      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015ee:	0018      	movs	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b00f      	add	sp, #60	; 0x3c
 80015f4:	bd90      	pop	{r4, r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	080022dc 	.word	0x080022dc
 80015fc:	080022ec 	.word	0x080022ec
 8001600:	40021000 	.word	0x40021000
 8001604:	007a1200 	.word	0x007a1200

08001608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800160c:	4b02      	ldr	r3, [pc, #8]	; (8001618 <HAL_RCC_GetHCLKFreq+0x10>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	20000000 	.word	0x20000000

0800161c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001620:	f7ff fff2 	bl	8001608 <HAL_RCC_GetHCLKFreq>
 8001624:	0001      	movs	r1, r0
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	2207      	movs	r2, #7
 800162e:	4013      	ands	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001632:	5cd3      	ldrb	r3, [r2, r3]
 8001634:	40d9      	lsrs	r1, r3
 8001636:	000b      	movs	r3, r1
}    
 8001638:	0018      	movs	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	40021000 	.word	0x40021000
 8001644:	0800230c 	.word	0x0800230c

08001648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	025b      	lsls	r3, r3, #9
 8001660:	4013      	ands	r3, r2
 8001662:	d100      	bne.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001664:	e08f      	b.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001666:	2317      	movs	r3, #23
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166e:	4b5f      	ldr	r3, [pc, #380]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001670:	69da      	ldr	r2, [r3, #28]
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	055b      	lsls	r3, r3, #21
 8001676:	4013      	ands	r3, r2
 8001678:	d111      	bne.n	800169e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	4b5c      	ldr	r3, [pc, #368]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800167c:	69da      	ldr	r2, [r3, #28]
 800167e:	4b5b      	ldr	r3, [pc, #364]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	0549      	lsls	r1, r1, #21
 8001684:	430a      	orrs	r2, r1
 8001686:	61da      	str	r2, [r3, #28]
 8001688:	4b58      	ldr	r3, [pc, #352]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800168a:	69da      	ldr	r2, [r3, #28]
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	055b      	lsls	r3, r3, #21
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001696:	2317      	movs	r3, #23
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169e:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4013      	ands	r3, r2
 80016a8:	d11a      	bne.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016aa:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b50      	ldr	r3, [pc, #320]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	0049      	lsls	r1, r1, #1
 80016b4:	430a      	orrs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b8:	f7ff f810 	bl	80006dc <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	e008      	b.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c2:	f7ff f80b 	bl	80006dc <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b64      	cmp	r3, #100	; 0x64
 80016ce:	d901      	bls.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e087      	b.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4013      	ands	r3, r2
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016e0:	4b42      	ldr	r3, [pc, #264]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016e2:	6a1a      	ldr	r2, [r3, #32]
 80016e4:	23c0      	movs	r3, #192	; 0xc0
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4013      	ands	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d034      	beq.n	800175c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	23c0      	movs	r3, #192	; 0xc0
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4013      	ands	r3, r2
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d02c      	beq.n	800175c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001702:	4b3a      	ldr	r3, [pc, #232]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a3b      	ldr	r2, [pc, #236]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800170c:	4b37      	ldr	r3, [pc, #220]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800170e:	6a1a      	ldr	r2, [r3, #32]
 8001710:	4b36      	ldr	r3, [pc, #216]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	0249      	lsls	r1, r1, #9
 8001716:	430a      	orrs	r2, r1
 8001718:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800171a:	4b34      	ldr	r3, [pc, #208]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800171c:	6a1a      	ldr	r2, [r3, #32]
 800171e:	4b33      	ldr	r3, [pc, #204]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001720:	4935      	ldr	r1, [pc, #212]	; (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001722:	400a      	ands	r2, r1
 8001724:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	4013      	ands	r3, r2
 8001732:	d013      	beq.n	800175c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7fe ffd2 	bl	80006dc <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173c:	e009      	b.n	8001752 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7fe ffcd 	bl	80006dc <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	4a2c      	ldr	r2, [pc, #176]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e048      	b.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	2202      	movs	r2, #2
 8001758:	4013      	ands	r3, r2
 800175a:	d0f0      	beq.n	800173e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4a24      	ldr	r2, [pc, #144]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001762:	4013      	ands	r3, r2
 8001764:	0019      	movs	r1, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800176c:	430a      	orrs	r2, r1
 800176e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001770:	2317      	movs	r3, #23
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d105      	bne.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001780:	491f      	ldr	r1, [pc, #124]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001782:	400a      	ands	r2, r1
 8001784:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2201      	movs	r2, #1
 800178c:	4013      	ands	r3, r2
 800178e:	d009      	beq.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001790:	4b16      	ldr	r3, [pc, #88]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	2203      	movs	r2, #3
 8001796:	4393      	bics	r3, r2
 8001798:	0019      	movs	r1, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017a0:	430a      	orrs	r2, r1
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2220      	movs	r2, #32
 80017aa:	4013      	ands	r3, r2
 80017ac:	d009      	beq.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	2210      	movs	r2, #16
 80017b4:	4393      	bics	r3, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017be:	430a      	orrs	r2, r1
 80017c0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	029b      	lsls	r3, r3, #10
 80017ca:	4013      	ands	r3, r2
 80017cc:	d009      	beq.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	2280      	movs	r2, #128	; 0x80
 80017d4:	4393      	bics	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017de:	430a      	orrs	r2, r1
 80017e0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b006      	add	sp, #24
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40007000 	.word	0x40007000
 80017f4:	fffffcff 	.word	0xfffffcff
 80017f8:	fffeffff 	.word	0xfffeffff
 80017fc:	00001388 	.word	0x00001388
 8001800:	efffffff 	.word	0xefffffff

08001804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e044      	b.n	80018a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800181a:	2b00      	cmp	r3, #0
 800181c:	d107      	bne.n	800182e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2274      	movs	r2, #116	; 0x74
 8001822:	2100      	movs	r1, #0
 8001824:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0018      	movs	r0, r3
 800182a:	f7fe fe47 	bl	80004bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2224      	movs	r2, #36	; 0x24
 8001832:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2101      	movs	r1, #1
 8001840:	438a      	bics	r2, r1
 8001842:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	0018      	movs	r0, r3
 8001848:	f000 f86a 	bl	8001920 <UART_SetConfig>
 800184c:	0003      	movs	r3, r0
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e024      	b.n	80018a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	0018      	movs	r0, r3
 8001862:	f000 f9b3 	bl	8001bcc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	490d      	ldr	r1, [pc, #52]	; (80018a8 <HAL_UART_Init+0xa4>)
 8001872:	400a      	ands	r2, r1
 8001874:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2108      	movs	r1, #8
 8001882:	438a      	bics	r2, r1
 8001884:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	0018      	movs	r0, r3
 800189a:	f000 fa4b 	bl	8001d34 <UART_CheckIdleState>
 800189e:	0003      	movs	r3, r0
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b002      	add	sp, #8
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	fffff7ff 	.word	0xfffff7ff

080018ac <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e02c      	b.n	8001918 <HAL_UART_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2224      	movs	r2, #36	; 0x24
 80018c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2101      	movs	r1, #1
 80018d0:	438a      	bics	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	0018      	movs	r0, r3
 80018f0:	f7fe fe32 	bl	8000558 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2280      	movs	r2, #128	; 0x80
 80018f8:	2100      	movs	r1, #0
 80018fa:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2274      	movs	r2, #116	; 0x74
 8001912:	2100      	movs	r1, #0
 8001914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}

08001920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001928:	231e      	movs	r3, #30
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a95      	ldr	r2, [pc, #596]	; (8001ba4 <UART_SetConfig+0x284>)
 8001950:	4013      	ands	r3, r2
 8001952:	0019      	movs	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4a90      	ldr	r2, [pc, #576]	; (8001ba8 <UART_SetConfig+0x288>)
 8001966:	4013      	ands	r3, r2
 8001968:	0019      	movs	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	4313      	orrs	r3, r2
 8001984:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a87      	ldr	r2, [pc, #540]	; (8001bac <UART_SetConfig+0x28c>)
 800198e:	4013      	ands	r3, r2
 8001990:	0019      	movs	r1, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	430a      	orrs	r2, r1
 800199a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a83      	ldr	r2, [pc, #524]	; (8001bb0 <UART_SetConfig+0x290>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d125      	bne.n	80019f2 <UART_SetConfig+0xd2>
 80019a6:	4b83      	ldr	r3, [pc, #524]	; (8001bb4 <UART_SetConfig+0x294>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	2203      	movs	r2, #3
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d00f      	beq.n	80019d2 <UART_SetConfig+0xb2>
 80019b2:	d304      	bcc.n	80019be <UART_SetConfig+0x9e>
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d011      	beq.n	80019dc <UART_SetConfig+0xbc>
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d005      	beq.n	80019c8 <UART_SetConfig+0xa8>
 80019bc:	e013      	b.n	80019e6 <UART_SetConfig+0xc6>
 80019be:	231f      	movs	r3, #31
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	e036      	b.n	8001a36 <UART_SetConfig+0x116>
 80019c8:	231f      	movs	r3, #31
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	2202      	movs	r2, #2
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	e031      	b.n	8001a36 <UART_SetConfig+0x116>
 80019d2:	231f      	movs	r3, #31
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	2204      	movs	r2, #4
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	e02c      	b.n	8001a36 <UART_SetConfig+0x116>
 80019dc:	231f      	movs	r3, #31
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	2208      	movs	r2, #8
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	e027      	b.n	8001a36 <UART_SetConfig+0x116>
 80019e6:	231f      	movs	r3, #31
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	2210      	movs	r2, #16
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	e021      	b.n	8001a36 <UART_SetConfig+0x116>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a70      	ldr	r2, [pc, #448]	; (8001bb8 <UART_SetConfig+0x298>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d104      	bne.n	8001a06 <UART_SetConfig+0xe6>
 80019fc:	231f      	movs	r3, #31
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	e017      	b.n	8001a36 <UART_SetConfig+0x116>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a6c      	ldr	r2, [pc, #432]	; (8001bbc <UART_SetConfig+0x29c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d104      	bne.n	8001a1a <UART_SetConfig+0xfa>
 8001a10:	231f      	movs	r3, #31
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	e00d      	b.n	8001a36 <UART_SetConfig+0x116>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a68      	ldr	r2, [pc, #416]	; (8001bc0 <UART_SetConfig+0x2a0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d104      	bne.n	8001a2e <UART_SetConfig+0x10e>
 8001a24:	231f      	movs	r3, #31
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	e003      	b.n	8001a36 <UART_SetConfig+0x116>
 8001a2e:	231f      	movs	r3, #31
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	2210      	movs	r2, #16
 8001a34:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69da      	ldr	r2, [r3, #28]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d15c      	bne.n	8001afc <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 8001a42:	231f      	movs	r3, #31
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d00d      	beq.n	8001a68 <UART_SetConfig+0x148>
 8001a4c:	dc02      	bgt.n	8001a54 <UART_SetConfig+0x134>
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <UART_SetConfig+0x13e>
 8001a52:	e015      	b.n	8001a80 <UART_SetConfig+0x160>
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d00a      	beq.n	8001a6e <UART_SetConfig+0x14e>
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d00d      	beq.n	8001a78 <UART_SetConfig+0x158>
 8001a5c:	e010      	b.n	8001a80 <UART_SetConfig+0x160>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a5e:	f7ff fddd 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 8001a62:	0003      	movs	r3, r0
 8001a64:	61bb      	str	r3, [r7, #24]
        break;
 8001a66:	e012      	b.n	8001a8e <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001a68:	4b56      	ldr	r3, [pc, #344]	; (8001bc4 <UART_SetConfig+0x2a4>)
 8001a6a:	61bb      	str	r3, [r7, #24]
        break;
 8001a6c:	e00f      	b.n	8001a8e <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001a6e:	f7ff fd65 	bl	800153c <HAL_RCC_GetSysClockFreq>
 8001a72:	0003      	movs	r3, r0
 8001a74:	61bb      	str	r3, [r7, #24]
        break;
 8001a76:	e00a      	b.n	8001a8e <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	61bb      	str	r3, [r7, #24]
        break;
 8001a7e:	e006      	b.n	8001a8e <UART_SetConfig+0x16e>
      default:
        pclk = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001a84:	231e      	movs	r3, #30
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
        break;
 8001a8c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d100      	bne.n	8001a96 <UART_SetConfig+0x176>
 8001a94:	e079      	b.n	8001b8a <UART_SetConfig+0x26a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	005a      	lsls	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	085b      	lsrs	r3, r3, #1
 8001aa0:	18d2      	adds	r2, r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	0010      	movs	r0, r2
 8001aaa:	f7fe fb2d 	bl	8000108 <__udivsi3>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b0f      	cmp	r3, #15
 8001ab8:	d91b      	bls.n	8001af2 <UART_SetConfig+0x1d2>
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4a42      	ldr	r2, [pc, #264]	; (8001bc8 <UART_SetConfig+0x2a8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d817      	bhi.n	8001af2 <UART_SetConfig+0x1d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	200e      	movs	r0, #14
 8001ac8:	183b      	adds	r3, r7, r0
 8001aca:	210f      	movs	r1, #15
 8001acc:	438a      	bics	r2, r1
 8001ace:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	2207      	movs	r2, #7
 8001ad8:	4013      	ands	r3, r2
 8001ada:	b299      	uxth	r1, r3
 8001adc:	183b      	adds	r3, r7, r0
 8001ade:	183a      	adds	r2, r7, r0
 8001ae0:	8812      	ldrh	r2, [r2, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	183a      	adds	r2, r7, r0
 8001aec:	8812      	ldrh	r2, [r2, #0]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	e04b      	b.n	8001b8a <UART_SetConfig+0x26a>
      }
      else
      {
        ret = HAL_ERROR;
 8001af2:	231e      	movs	r3, #30
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e046      	b.n	8001b8a <UART_SetConfig+0x26a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001afc:	231f      	movs	r3, #31
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d00d      	beq.n	8001b22 <UART_SetConfig+0x202>
 8001b06:	dc02      	bgt.n	8001b0e <UART_SetConfig+0x1ee>
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <UART_SetConfig+0x1f8>
 8001b0c:	e015      	b.n	8001b3a <UART_SetConfig+0x21a>
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d00a      	beq.n	8001b28 <UART_SetConfig+0x208>
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d00d      	beq.n	8001b32 <UART_SetConfig+0x212>
 8001b16:	e010      	b.n	8001b3a <UART_SetConfig+0x21a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b18:	f7ff fd80 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	61bb      	str	r3, [r7, #24]
        break;
 8001b20:	e012      	b.n	8001b48 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001b22:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <UART_SetConfig+0x2a4>)
 8001b24:	61bb      	str	r3, [r7, #24]
        break;
 8001b26:	e00f      	b.n	8001b48 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001b28:	f7ff fd08 	bl	800153c <HAL_RCC_GetSysClockFreq>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	61bb      	str	r3, [r7, #24]
        break;
 8001b30:	e00a      	b.n	8001b48 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	61bb      	str	r3, [r7, #24]
        break;
 8001b38:	e006      	b.n	8001b48 <UART_SetConfig+0x228>
      default:
        pclk = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001b3e:	231e      	movs	r3, #30
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
        break;
 8001b46:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d01d      	beq.n	8001b8a <UART_SetConfig+0x26a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	085a      	lsrs	r2, r3, #1
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	18d2      	adds	r2, r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	0010      	movs	r0, r2
 8001b60:	f7fe fad2 	bl	8000108 <__udivsi3>
 8001b64:	0003      	movs	r3, r0
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d908      	bls.n	8001b82 <UART_SetConfig+0x262>
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <UART_SetConfig+0x2a8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d804      	bhi.n	8001b82 <UART_SetConfig+0x262>
      {
        huart->Instance->BRR = usartdiv;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	e003      	b.n	8001b8a <UART_SetConfig+0x26a>
      }
      else
      {
        ret = HAL_ERROR;
 8001b82:	231e      	movs	r3, #30
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001b96:	231e      	movs	r3, #30
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	781b      	ldrb	r3, [r3, #0]
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b008      	add	sp, #32
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	efff69f3 	.word	0xefff69f3
 8001ba8:	ffffcfff 	.word	0xffffcfff
 8001bac:	fffff4ff 	.word	0xfffff4ff
 8001bb0:	40013800 	.word	0x40013800
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40004400 	.word	0x40004400
 8001bbc:	40004800 	.word	0x40004800
 8001bc0:	40004c00 	.word	0x40004c00
 8001bc4:	007a1200 	.word	0x007a1200
 8001bc8:	0000ffff 	.word	0x0000ffff

08001bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d00b      	beq.n	8001bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a4a      	ldr	r2, [pc, #296]	; (8001d10 <UART_AdvFeatureConfig+0x144>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	0019      	movs	r1, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d00b      	beq.n	8001c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4a43      	ldr	r2, [pc, #268]	; (8001d14 <UART_AdvFeatureConfig+0x148>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d00b      	beq.n	8001c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a3b      	ldr	r2, [pc, #236]	; (8001d18 <UART_AdvFeatureConfig+0x14c>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	2208      	movs	r2, #8
 8001c40:	4013      	ands	r3, r2
 8001c42:	d00b      	beq.n	8001c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4a34      	ldr	r2, [pc, #208]	; (8001d1c <UART_AdvFeatureConfig+0x150>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	2210      	movs	r2, #16
 8001c62:	4013      	ands	r3, r2
 8001c64:	d00b      	beq.n	8001c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a2c      	ldr	r2, [pc, #176]	; (8001d20 <UART_AdvFeatureConfig+0x154>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	2220      	movs	r2, #32
 8001c84:	4013      	ands	r3, r2
 8001c86:	d00b      	beq.n	8001ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4a25      	ldr	r2, [pc, #148]	; (8001d24 <UART_AdvFeatureConfig+0x158>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	0019      	movs	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	2240      	movs	r2, #64	; 0x40
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d01d      	beq.n	8001ce6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <UART_AdvFeatureConfig+0x15c>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	035b      	lsls	r3, r3, #13
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d10b      	bne.n	8001ce6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4a15      	ldr	r2, [pc, #84]	; (8001d2c <UART_AdvFeatureConfig+0x160>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	4013      	ands	r3, r2
 8001cee:	d00b      	beq.n	8001d08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <UART_AdvFeatureConfig+0x164>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	605a      	str	r2, [r3, #4]
  }
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	fffdffff 	.word	0xfffdffff
 8001d14:	fffeffff 	.word	0xfffeffff
 8001d18:	fffbffff 	.word	0xfffbffff
 8001d1c:	ffff7fff 	.word	0xffff7fff
 8001d20:	ffffefff 	.word	0xffffefff
 8001d24:	ffffdfff 	.word	0xffffdfff
 8001d28:	ffefffff 	.word	0xffefffff
 8001d2c:	ff9fffff 	.word	0xff9fffff
 8001d30:	fff7ffff 	.word	0xfff7ffff

08001d34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	2100      	movs	r1, #0
 8001d42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001d44:	f7fe fcca 	bl	80006dc <HAL_GetTick>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2208      	movs	r2, #8
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d10d      	bne.n	8001d76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	0399      	lsls	r1, r3, #14
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <UART_CheckIdleState+0x90>)
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	0013      	movs	r3, r2
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f000 f82d 	bl	8001dc8 <UART_WaitOnFlagUntilTimeout>
 8001d6e:	1e03      	subs	r3, r0, #0
 8001d70:	d001      	beq.n	8001d76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e022      	b.n	8001dbc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d10d      	bne.n	8001da0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	03d9      	lsls	r1, r3, #15
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <UART_CheckIdleState+0x90>)
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	0013      	movs	r3, r2
 8001d92:	2200      	movs	r2, #0
 8001d94:	f000 f818 	bl	8001dc8 <UART_WaitOnFlagUntilTimeout>
 8001d98:	1e03      	subs	r3, r0, #0
 8001d9a:	d001      	beq.n	8001da0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e00d      	b.n	8001dbc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2220      	movs	r2, #32
 8001daa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2274      	movs	r2, #116	; 0x74
 8001db6:	2100      	movs	r1, #0
 8001db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b004      	add	sp, #16
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	01ffffff 	.word	0x01ffffff

08001dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	1dfb      	adds	r3, r7, #7
 8001dd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dd8:	e05e      	b.n	8001e98 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	d05b      	beq.n	8001e98 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de0:	f7fe fc7c 	bl	80006dc <HAL_GetTick>
 8001de4:	0002      	movs	r2, r0
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d302      	bcc.n	8001df6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d11b      	bne.n	8001e2e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	492f      	ldr	r1, [pc, #188]	; (8001ec0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8001e02:	400a      	ands	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	438a      	bics	r2, r1
 8001e14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2274      	movs	r2, #116	; 0x74
 8001e26:	2100      	movs	r1, #0
 8001e28:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e044      	b.n	8001eb8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2204      	movs	r2, #4
 8001e36:	4013      	ands	r3, r2
 8001e38:	d02e      	beq.n	8001e98 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	69da      	ldr	r2, [r3, #28]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	401a      	ands	r2, r3
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d124      	bne.n	8001e98 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4917      	ldr	r1, [pc, #92]	; (8001ec0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8001e64:	400a      	ands	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2101      	movs	r1, #1
 8001e74:	438a      	bics	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2220      	movs	r2, #32
 8001e82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	2120      	movs	r1, #32
 8001e8a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2274      	movs	r2, #116	; 0x74
 8001e90:	2100      	movs	r1, #0
 8001e92:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e00f      	b.n	8001eb8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	425a      	negs	r2, r3
 8001ea8:	4153      	adcs	r3, r2
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	001a      	movs	r2, r3
 8001eae:	1dfb      	adds	r3, r7, #7
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d091      	beq.n	8001dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b004      	add	sp, #16
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	fffffe5f 	.word	0xfffffe5f

08001ec4 <pwm_init>:
#include "stm32f0xx_hal.h"
#include "pwm_driver.h"


void pwm_init(void)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM3_CLK_ENABLE();
 8001eca:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <pwm_init+0x130>)
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	4b49      	ldr	r3, [pc, #292]	; (8001ff4 <pwm_init+0x130>)
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	61da      	str	r2, [r3, #28]
 8001ed6:	4b47      	ldr	r3, [pc, #284]	; (8001ff4 <pwm_init+0x130>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	2202      	movs	r2, #2
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	4b44      	ldr	r3, [pc, #272]	; (8001ff4 <pwm_init+0x130>)
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <pwm_init+0x130>)
 8001ee8:	2180      	movs	r1, #128	; 0x80
 8001eea:	02c9      	lsls	r1, r1, #11
 8001eec:	430a      	orrs	r2, r1
 8001eee:	615a      	str	r2, [r3, #20]
 8001ef0:	4b40      	ldr	r3, [pc, #256]	; (8001ff4 <pwm_init+0x130>)
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	02db      	lsls	r3, r3, #11
 8001ef8:	4013      	ands	r3, r2
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001efe:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <pwm_init+0x130>)
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	4b3c      	ldr	r3, [pc, #240]	; (8001ff4 <pwm_init+0x130>)
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	0309      	lsls	r1, r1, #12
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	615a      	str	r2, [r3, #20]
 8001f0c:	4b39      	ldr	r3, [pc, #228]	; (8001ff4 <pwm_init+0x130>)
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	031b      	lsls	r3, r3, #12
 8001f14:	4013      	ands	r3, r2
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]

	// PB4 - TIMER3 - CH1 - D5
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f1a:	210c      	movs	r1, #12
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	2210      	movs	r2, #16
 8001f20:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	187b      	adds	r3, r7, r1
 8001f24:	2202      	movs	r2, #2
 8001f26:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	187b      	adds	r3, r7, r1
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f2e:	187b      	adds	r3, r7, r1
 8001f30:	2203      	movs	r2, #3
 8001f32:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	2201      	movs	r2, #1
 8001f38:	611a      	str	r2, [r3, #16]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	000c      	movs	r4, r1
 8001f3c:	187b      	adds	r3, r7, r1
 8001f3e:	4a2e      	ldr	r2, [pc, #184]	; (8001ff8 <pwm_init+0x134>)
 8001f40:	0019      	movs	r1, r3
 8001f42:	0010      	movs	r0, r2
 8001f44:	f7fe fcb2 	bl	80008ac <HAL_GPIO_Init>

	// PC7 - TIMER3 - CH2 - D9
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f48:	0021      	movs	r1, r4
 8001f4a:	187b      	adds	r3, r7, r1
 8001f4c:	2280      	movs	r2, #128	; 0x80
 8001f4e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8001f50:	187b      	adds	r3, r7, r1
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f56:	187b      	adds	r3, r7, r1
 8001f58:	4a28      	ldr	r2, [pc, #160]	; (8001ffc <pwm_init+0x138>)
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	0010      	movs	r0, r2
 8001f5e:	f7fe fca5 	bl	80008ac <HAL_GPIO_Init>

	TIM3->PSC = 47; // Timer clock = 48 mhz / 48 = 1 MHz
 8001f62:	4b27      	ldr	r3, [pc, #156]	; (8002000 <pwm_init+0x13c>)
 8001f64:	222f      	movs	r2, #47	; 0x2f
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 10;  // period 10 us ==> 100 KHz
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <pwm_init+0x13c>)
 8001f6a:	220a      	movs	r2, #10
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = 1;
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <pwm_init+0x13c>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 2;
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <pwm_init+0x13c>)
 8001f76:	2202      	movs	r2, #2
 8001f78:	639a      	str	r2, [r3, #56]	; 0x38

	// CH-1 PWM MODE 
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001f7a:	4b21      	ldr	r3, [pc, #132]	; (8002000 <pwm_init+0x13c>)
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <pwm_init+0x13c>)
 8001f80:	2140      	movs	r1, #64	; 0x40
 8001f82:	430a      	orrs	r2, r1
 8001f84:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_1;
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <pwm_init+0x13c>)
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <pwm_init+0x13c>)
 8001f8c:	2120      	movs	r1, #32
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <pwm_init+0x13c>)
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <pwm_init+0x13c>)
 8001f98:	2108      	movs	r1, #8
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	619a      	str	r2, [r3, #24]

	// CH-2 PWM MODE 
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_2;
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <pwm_init+0x13c>)
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <pwm_init+0x13c>)
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	01c9      	lsls	r1, r1, #7
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_1;
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <pwm_init+0x13c>)
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <pwm_init+0x13c>)
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	0189      	lsls	r1, r1, #6
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <pwm_init+0x13c>)
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <pwm_init+0x13c>)
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	0109      	lsls	r1, r1, #4
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	619a      	str	r2, [r3, #24]

	// Enable OC1REF and OC2REF OUTPUTS
	TIM3->CCER |= TIM_CCER_CC1E;
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <pwm_init+0x13c>)
 8001fca:	6a1a      	ldr	r2, [r3, #32]
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <pwm_init+0x13c>)
 8001fce:	2101      	movs	r1, #1
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	621a      	str	r2, [r3, #32]
	TIM3->CCER |= TIM_CCER_CC2E;
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <pwm_init+0x13c>)
 8001fd6:	6a1a      	ldr	r2, [r3, #32]
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <pwm_init+0x13c>)
 8001fda:	2110      	movs	r1, #16
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	621a      	str	r2, [r3, #32]

	// Enable Timer
	TIM3->CR1 |= TIM_CR1_CEN;
 8001fe0:	4b07      	ldr	r3, [pc, #28]	; (8002000 <pwm_init+0x13c>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <pwm_init+0x13c>)
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]
}
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b009      	add	sp, #36	; 0x24
 8001ff2:	bd90      	pop	{r4, r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	48000400 	.word	0x48000400
 8001ffc:	48000800 	.word	0x48000800
 8002000:	40000400 	.word	0x40000400

08002004 <pwm_set_duty_cycle>:
	TIM3->CR1 &= ~(TIM_CR1_CEN);	
}


void pwm_set_duty_cycle(uint32_t duty, uint32_t channel)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
	switch(channel)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d002      	beq.n	800201a <pwm_set_duty_cycle+0x16>
 8002014:	2b02      	cmp	r3, #2
 8002016:	d004      	beq.n	8002022 <pwm_set_duty_cycle+0x1e>
		
		case 2:
			TIM3->CCR2 = duty; 		
			break;
	}
}
 8002018:	e007      	b.n	800202a <pwm_set_duty_cycle+0x26>
			TIM3->CCR1 = duty;  
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <pwm_set_duty_cycle+0x30>)
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002020:	e003      	b.n	800202a <pwm_set_duty_cycle+0x26>
			TIM3->CCR2 = duty; 		
 8002022:	4b04      	ldr	r3, [pc, #16]	; (8002034 <pwm_set_duty_cycle+0x30>)
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8002028:	46c0      	nop			; (mov r8, r8)
}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	46bd      	mov	sp, r7
 800202e:	b002      	add	sp, #8
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	40000400 	.word	0x40000400

08002038 <TIM6_IRQHandler>:
	TIM6->CR1 &= ~(TIM_CR1_CEN);	
}

// Timer6 Interrupt Request Handler
void TIM6_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	TIM6->SR &=~(TIM_SR_UIF);
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <TIM6_IRQHandler+0x28>)
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <TIM6_IRQHandler+0x28>)
 8002042:	2101      	movs	r1, #1
 8002044:	438a      	bics	r2, r1
 8002046:	611a      	str	r2, [r3, #16]
	
	GPIOA->ODR ^= GPIO_PIN_5;
 8002048:	2390      	movs	r3, #144	; 0x90
 800204a:	05db      	lsls	r3, r3, #23
 800204c:	695a      	ldr	r2, [r3, #20]
 800204e:	2390      	movs	r3, #144	; 0x90
 8002050:	05db      	lsls	r3, r3, #23
 8002052:	2120      	movs	r1, #32
 8002054:	404a      	eors	r2, r1
 8002056:	615a      	str	r2, [r3, #20]
}
 8002058:	46c0      	nop			; (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	40001000 	.word	0x40001000

08002064 <UART_Init>:
  ayarlarla baslatir. 
  RX kesmelerini aktif hale getirir.

*/
void UART_Init()
{
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
	
GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */  
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	4b42      	ldr	r3, [pc, #264]	; (8002174 <UART_Init+0x110>)
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	4b41      	ldr	r3, [pc, #260]	; (8002174 <UART_Init+0x110>)
 8002070:	2180      	movs	r1, #128	; 0x80
 8002072:	0289      	lsls	r1, r1, #10
 8002074:	430a      	orrs	r2, r1
 8002076:	615a      	str	r2, [r3, #20]
 8002078:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <UART_Init+0x110>)
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	029b      	lsls	r3, r3, #10
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]

  /* Enable USARTx clock */
  __HAL_RCC_USART2_CLK_ENABLE(); 
 8002086:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <UART_Init+0x110>)
 8002088:	69da      	ldr	r2, [r3, #28]
 800208a:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <UART_Init+0x110>)
 800208c:	2180      	movs	r1, #128	; 0x80
 800208e:	0289      	lsls	r1, r1, #10
 8002090:	430a      	orrs	r2, r1
 8002092:	61da      	str	r2, [r3, #28]
 8002094:	4b37      	ldr	r3, [pc, #220]	; (8002174 <UART_Init+0x110>)
 8002096:	69da      	ldr	r2, [r3, #28]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	029b      	lsls	r3, r3, #10
 800209c:	4013      	ands	r3, r2
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
	
	
  GPIO_InitStruct.Pin       = GPIO_PIN_2;
 80020a2:	240c      	movs	r4, #12
 80020a4:	193b      	adds	r3, r7, r4
 80020a6:	2204      	movs	r2, #4
 80020a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80020aa:	193b      	adds	r3, r7, r4
 80020ac:	2202      	movs	r2, #2
 80020ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80020b0:	193b      	adds	r3, r7, r4
 80020b2:	2201      	movs	r2, #1
 80020b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80020b6:	193b      	adds	r3, r7, r4
 80020b8:	2203      	movs	r2, #3
 80020ba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	2201      	movs	r2, #1
 80020c0:	611a      	str	r2, [r3, #16]
  
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	193a      	adds	r2, r7, r4
 80020c4:	2390      	movs	r3, #144	; 0x90
 80020c6:	05db      	lsls	r3, r3, #23
 80020c8:	0011      	movs	r1, r2
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7fe fbee 	bl	80008ac <HAL_GPIO_Init>
    
  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020d0:	0021      	movs	r1, r4
 80020d2:	187b      	adds	r3, r7, r1
 80020d4:	2208      	movs	r2, #8
 80020d6:	601a      	str	r2, [r3, #0]
	
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80020d8:	187b      	adds	r3, r7, r1
 80020da:	2202      	movs	r2, #2
 80020dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80020de:	187b      	adds	r3, r7, r1
 80020e0:	2201      	movs	r2, #1
 80020e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80020e4:	187b      	adds	r3, r7, r1
 80020e6:	2203      	movs	r2, #3
 80020e8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80020ea:	187b      	adds	r3, r7, r1
 80020ec:	2201      	movs	r2, #1
 80020ee:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f0:	187a      	adds	r2, r7, r1
 80020f2:	2390      	movs	r3, #144	; 0x90
 80020f4:	05db      	lsls	r3, r3, #23
 80020f6:	0011      	movs	r1, r2
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7fe fbd7 	bl	80008ac <HAL_GPIO_Init>
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = None
      - BaudRate = 9600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USART2;
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <UART_Init+0x114>)
 8002100:	4a1e      	ldr	r2, [pc, #120]	; (800217c <UART_Init+0x118>)
 8002102:	601a      	str	r2, [r3, #0]
	
  UartHandle.Init.BaudRate   = 9600;
 8002104:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <UART_Init+0x114>)
 8002106:	2296      	movs	r2, #150	; 0x96
 8002108:	0192      	lsls	r2, r2, #6
 800210a:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800210c:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <UART_Init+0x114>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <UART_Init+0x114>)
 8002114:	2200      	movs	r2, #0
 8002116:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <UART_Init+0x114>)
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <UART_Init+0x114>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <UART_Init+0x114>)
 8002126:	220c      	movs	r2, #12
 8002128:	615a      	str	r2, [r3, #20]
  UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT; 
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <UART_Init+0x114>)
 800212c:	2200      	movs	r2, #0
 800212e:	625a      	str	r2, [r3, #36]	; 0x24
	
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <UART_Init+0x114>)
 8002132:	0018      	movs	r0, r3
 8002134:	f7ff fbba 	bl	80018ac <HAL_UART_DeInit>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d001      	beq.n	8002140 <UART_Init+0xdc>
  {
    //ERROR
		UART_Error_Handler();
 800213c:	f000 f820 	bl	8002180 <UART_Error_Handler>
  }  
	
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8002140:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <UART_Init+0x114>)
 8002142:	0018      	movs	r0, r3
 8002144:	f7ff fb5e 	bl	8001804 <HAL_UART_Init>
 8002148:	1e03      	subs	r3, r0, #0
 800214a:	d001      	beq.n	8002150 <UART_Init+0xec>
  {
		//ERROR
    UART_Error_Handler();
 800214c:	f000 f818 	bl	8002180 <UART_Error_Handler>
  }
	
/* 4- Enable UART Receive Data Register Not Empty */
   SET_BIT(USART2->CR1, USART_CR1_RXNEIE);
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <UART_Init+0x118>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <UART_Init+0x118>)
 8002156:	2120      	movs	r1, #32
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

	
	/* 5 - Enable UART Interrupt in NVIC */
	
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 800215c:	2201      	movs	r2, #1
 800215e:	2100      	movs	r1, #0
 8002160:	201c      	movs	r0, #28
 8002162:	f7fe fb71 	bl	8000848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002166:	201c      	movs	r0, #28
 8002168:	f7fe fb83 	bl	8000872 <HAL_NVIC_EnableIRQ>
}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	b009      	add	sp, #36	; 0x24
 8002172:	bd90      	pop	{r4, r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	200000b0 	.word	0x200000b0
 800217c:	40004400 	.word	0x40004400

08002180 <UART_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void UART_Error_Handler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
     while(1)
 8002184:	e7fe      	b.n	8002184 <UART_Error_Handler+0x4>
	...

08002188 <USART2_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA 
  *         used for USART data transmission     
  */
void USART2_IRQHandler(void)
{  
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
  uint32_t isrflags = USART2->ISR;
 800218e:	4b33      	ldr	r3, [pc, #204]	; (800225c <USART2_IRQHandler+0xd4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	607b      	str	r3, [r7, #4]
  uint32_t control_reg1 = USART2->CR1;
 8002194:	4b31      	ldr	r3, [pc, #196]	; (800225c <USART2_IRQHandler+0xd4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	603b      	str	r3, [r7, #0]

  /* UART in mode Receiver */
  if(((isrflags & USART_ISR_RXNE) != RESET) && ((control_reg1 & USART_CR1_RXNEIE) != RESET))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2220      	movs	r2, #32
 800219e:	4013      	ands	r3, r2
 80021a0:	d024      	beq.n	80021ec <USART2_IRQHandler+0x64>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2220      	movs	r2, #32
 80021a6:	4013      	ands	r3, r2
 80021a8:	d020      	beq.n	80021ec <USART2_IRQHandler+0x64>
  {
	  /* Read one byte from the receive data register */

	  UART_BufferRX.buffer[UART_BufferRX.head_pointer] = USART2->RDR;
 80021aa:	4b2c      	ldr	r3, [pc, #176]	; (800225c <USART2_IRQHandler+0xd4>)
 80021ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80021ae:	b299      	uxth	r1, r3
 80021b0:	4a2b      	ldr	r2, [pc, #172]	; (8002260 <USART2_IRQHandler+0xd8>)
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	58d2      	ldr	r2, [r2, r3]
 80021b8:	4b29      	ldr	r3, [pc, #164]	; (8002260 <USART2_IRQHandler+0xd8>)
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	50d1      	str	r1, [r2, r3]

	  UART_BufferRX.head_pointer = UART_BufferRX.head_pointer + 1;
 80021be:	4a28      	ldr	r2, [pc, #160]	; (8002260 <USART2_IRQHandler+0xd8>)
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	58d3      	ldr	r3, [r2, r3]
 80021c6:	1c59      	adds	r1, r3, #1
 80021c8:	4a25      	ldr	r2, [pc, #148]	; (8002260 <USART2_IRQHandler+0xd8>)
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	50d1      	str	r1, [r2, r3]

	  if(UART_BufferRX.head_pointer == BUFFER_SIZE)
 80021d0:	4a23      	ldr	r2, [pc, #140]	; (8002260 <USART2_IRQHandler+0xd8>)
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	58d2      	ldr	r2, [r2, r3]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	429a      	cmp	r2, r3
 80021de:	d137      	bne.n	8002250 <USART2_IRQHandler+0xc8>
	  {
		  UART_BufferRX.head_pointer = 0;
 80021e0:	4a1f      	ldr	r2, [pc, #124]	; (8002260 <USART2_IRQHandler+0xd8>)
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	2100      	movs	r1, #0
 80021e8:	50d1      	str	r1, [r2, r3]
	  }

	  return;
 80021ea:	e031      	b.n	8002250 <USART2_IRQHandler+0xc8>
  }


  /* UART in mode Transmitter */
  if(((isrflags & USART_ISR_TXE) != RESET) && ((control_reg1 & USART_CR1_TXEIE) != RESET))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	4013      	ands	r3, r2
 80021f2:	d030      	beq.n	8002256 <USART2_IRQHandler+0xce>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	4013      	ands	r3, r2
 80021fa:	d02c      	beq.n	8002256 <USART2_IRQHandler+0xce>
  {    
		if(UART_BufferTX.head_pointer != UART_BufferTX.tail_pointer)
 80021fc:	4a19      	ldr	r2, [pc, #100]	; (8002264 <USART2_IRQHandler+0xdc>)
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	58d2      	ldr	r2, [r2, r3]
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <USART2_IRQHandler+0xdc>)
 8002206:	4918      	ldr	r1, [pc, #96]	; (8002268 <USART2_IRQHandler+0xe0>)
 8002208:	585b      	ldr	r3, [r3, r1]
 800220a:	429a      	cmp	r2, r3
 800220c:	d018      	beq.n	8002240 <USART2_IRQHandler+0xb8>
		{
			// Send one byte from Transmit buffer
			USART2->TDR = UART_BufferTX.buffer[UART_BufferTX.tail_pointer++];
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <USART2_IRQHandler+0xdc>)
 8002210:	4a15      	ldr	r2, [pc, #84]	; (8002268 <USART2_IRQHandler+0xe0>)
 8002212:	589b      	ldr	r3, [r3, r2]
 8002214:	1c59      	adds	r1, r3, #1
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <USART2_IRQHandler+0xdc>)
 8002218:	4813      	ldr	r0, [pc, #76]	; (8002268 <USART2_IRQHandler+0xe0>)
 800221a:	5011      	str	r1, [r2, r0]
 800221c:	4a11      	ldr	r2, [pc, #68]	; (8002264 <USART2_IRQHandler+0xdc>)
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	589a      	ldr	r2, [r3, r2]
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <USART2_IRQHandler+0xd4>)
 8002224:	b292      	uxth	r2, r2
 8002226:	851a      	strh	r2, [r3, #40]	; 0x28
			
			if(UART_BufferTX.tail_pointer == BUFFER_SIZE)
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <USART2_IRQHandler+0xdc>)
 800222a:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <USART2_IRQHandler+0xe0>)
 800222c:	589a      	ldr	r2, [r3, r2]
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	429a      	cmp	r2, r3
 8002234:	d10e      	bne.n	8002254 <USART2_IRQHandler+0xcc>
			{
				UART_BufferTX.tail_pointer = 0;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <USART2_IRQHandler+0xdc>)
 8002238:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <USART2_IRQHandler+0xe0>)
 800223a:	2100      	movs	r1, #0
 800223c:	5099      	str	r1, [r3, r2]
		{
			/* Disable the UART Transmit Data Register Empty Interrupt */
			CLEAR_BIT(USART2->CR1, USART_CR1_TXEIE);
		}			
		
    return;
 800223e:	e009      	b.n	8002254 <USART2_IRQHandler+0xcc>
			CLEAR_BIT(USART2->CR1, USART_CR1_TXEIE);
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <USART2_IRQHandler+0xd4>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <USART2_IRQHandler+0xd4>)
 8002246:	2180      	movs	r1, #128	; 0x80
 8002248:	438a      	bics	r2, r1
 800224a:	601a      	str	r2, [r3, #0]
    return;
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	e001      	b.n	8002254 <USART2_IRQHandler+0xcc>
	  return;
 8002250:	46c0      	nop			; (mov r8, r8)
 8002252:	e000      	b.n	8002256 <USART2_IRQHandler+0xce>
    return;
 8002254:	46c0      	nop			; (mov r8, r8)
  }
}
 8002256:	46bd      	mov	sp, r7
 8002258:	b002      	add	sp, #8
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40004400 	.word	0x40004400
 8002260:	20000134 	.word	0x20000134
 8002264:	2000053c 	.word	0x2000053c
 8002268:	00000404 	.word	0x00000404

0800226c <__libc_init_array>:
 800226c:	b570      	push	{r4, r5, r6, lr}
 800226e:	2600      	movs	r6, #0
 8002270:	4d0c      	ldr	r5, [pc, #48]	; (80022a4 <__libc_init_array+0x38>)
 8002272:	4c0d      	ldr	r4, [pc, #52]	; (80022a8 <__libc_init_array+0x3c>)
 8002274:	1b64      	subs	r4, r4, r5
 8002276:	10a4      	asrs	r4, r4, #2
 8002278:	42a6      	cmp	r6, r4
 800227a:	d109      	bne.n	8002290 <__libc_init_array+0x24>
 800227c:	2600      	movs	r6, #0
 800227e:	f000 f821 	bl	80022c4 <_init>
 8002282:	4d0a      	ldr	r5, [pc, #40]	; (80022ac <__libc_init_array+0x40>)
 8002284:	4c0a      	ldr	r4, [pc, #40]	; (80022b0 <__libc_init_array+0x44>)
 8002286:	1b64      	subs	r4, r4, r5
 8002288:	10a4      	asrs	r4, r4, #2
 800228a:	42a6      	cmp	r6, r4
 800228c:	d105      	bne.n	800229a <__libc_init_array+0x2e>
 800228e:	bd70      	pop	{r4, r5, r6, pc}
 8002290:	00b3      	lsls	r3, r6, #2
 8002292:	58eb      	ldr	r3, [r5, r3]
 8002294:	4798      	blx	r3
 8002296:	3601      	adds	r6, #1
 8002298:	e7ee      	b.n	8002278 <__libc_init_array+0xc>
 800229a:	00b3      	lsls	r3, r6, #2
 800229c:	58eb      	ldr	r3, [r5, r3]
 800229e:	4798      	blx	r3
 80022a0:	3601      	adds	r6, #1
 80022a2:	e7f2      	b.n	800228a <__libc_init_array+0x1e>
 80022a4:	08002314 	.word	0x08002314
 80022a8:	08002314 	.word	0x08002314
 80022ac:	08002314 	.word	0x08002314
 80022b0:	08002318 	.word	0x08002318

080022b4 <memset>:
 80022b4:	0003      	movs	r3, r0
 80022b6:	1812      	adds	r2, r2, r0
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d100      	bne.n	80022be <memset+0xa>
 80022bc:	4770      	bx	lr
 80022be:	7019      	strb	r1, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	e7f9      	b.n	80022b8 <memset+0x4>

080022c4 <_init>:
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ca:	bc08      	pop	{r3}
 80022cc:	469e      	mov	lr, r3
 80022ce:	4770      	bx	lr

080022d0 <_fini>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr
